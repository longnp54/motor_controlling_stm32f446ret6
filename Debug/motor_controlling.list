
motor_controlling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043fc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080045c0  080045c0  000055c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d0  080045d0  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080045d0  080045d0  000055d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045d8  080045d8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d8  080045d8  000055d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045dc  080045dc  000055dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000000c  080045ec  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  080045ec  00006224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a585  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b62  00000000  00000000  000105c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00012128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000863  00000000  00000000  00012c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000219a7  00000000  00000000  00013463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c91b  00000000  00000000  00034e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce8e2  00000000  00000000  00041725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110007  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f30  00000000  00000000  0011004c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00112f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080045a8 	.word	0x080045a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080045a8 	.word	0x080045a8

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	@ 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__gedf2>:
 80009a0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009a4:	e006      	b.n	80009b4 <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__ledf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	e002      	b.n	80009b4 <__cmpdf2+0x4>
 80009ae:	bf00      	nop

080009b0 <__cmpdf2>:
 80009b0:	f04f 0c01 	mov.w	ip, #1
 80009b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ca:	d01b      	beq.n	8000a04 <__cmpdf2+0x54>
 80009cc:	b001      	add	sp, #4
 80009ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d2:	bf0c      	ite	eq
 80009d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d8:	ea91 0f03 	teqne	r1, r3
 80009dc:	bf02      	ittt	eq
 80009de:	ea90 0f02 	teqeq	r0, r2
 80009e2:	2000      	moveq	r0, #0
 80009e4:	4770      	bxeq	lr
 80009e6:	f110 0f00 	cmn.w	r0, #0
 80009ea:	ea91 0f03 	teq	r1, r3
 80009ee:	bf58      	it	pl
 80009f0:	4299      	cmppl	r1, r3
 80009f2:	bf08      	it	eq
 80009f4:	4290      	cmpeq	r0, r2
 80009f6:	bf2c      	ite	cs
 80009f8:	17d8      	asrcs	r0, r3, #31
 80009fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fe:	f040 0001 	orr.w	r0, r0, #1
 8000a02:	4770      	bx	lr
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__cmpdf2+0x64>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d107      	bne.n	8000a24 <__cmpdf2+0x74>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d1d6      	bne.n	80009cc <__cmpdf2+0x1c>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d0d3      	beq.n	80009cc <__cmpdf2+0x1c>
 8000a24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdrcmple>:
 8000a2c:	4684      	mov	ip, r0
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4662      	mov	r2, ip
 8000a32:	468c      	mov	ip, r1
 8000a34:	4619      	mov	r1, r3
 8000a36:	4663      	mov	r3, ip
 8000a38:	e000      	b.n	8000a3c <__aeabi_cdcmpeq>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_cdcmpeq>:
 8000a3c:	b501      	push	{r0, lr}
 8000a3e:	f7ff ffb7 	bl	80009b0 <__cmpdf2>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	bf48      	it	mi
 8000a46:	f110 0f00 	cmnmi.w	r0, #0
 8000a4a:	bd01      	pop	{r0, pc}

08000a4c <__aeabi_dcmpeq>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff fff4 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a54:	bf0c      	ite	eq
 8000a56:	2001      	moveq	r0, #1
 8000a58:	2000      	movne	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmplt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffea 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmple>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffe0 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpge>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffce 	bl	8000a2c <__aeabi_cdrcmple>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpgt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffc4 	bl	8000a2c <__aeabi_cdrcmple>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b64:	f000 b988 	b.w	8000e78 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	468e      	mov	lr, r1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	4688      	mov	r8, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14a      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4617      	mov	r7, r2
 8000b94:	d962      	bls.n	8000c5c <__udivmoddi4+0xdc>
 8000b96:	fab2 f682 	clz	r6, r2
 8000b9a:	b14e      	cbz	r6, 8000bb0 <__udivmoddi4+0x30>
 8000b9c:	f1c6 0320 	rsb	r3, r6, #32
 8000ba0:	fa01 f806 	lsl.w	r8, r1, r6
 8000ba4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba8:	40b7      	lsls	r7, r6
 8000baa:	ea43 0808 	orr.w	r8, r3, r8
 8000bae:	40b4      	lsls	r4, r6
 8000bb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb4:	fa1f fc87 	uxth.w	ip, r7
 8000bb8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bbc:	0c23      	lsrs	r3, r4, #16
 8000bbe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc6:	fb01 f20c 	mul.w	r2, r1, ip
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d909      	bls.n	8000be2 <__udivmoddi4+0x62>
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000bd4:	f080 80ea 	bcs.w	8000dac <__udivmoddi4+0x22c>
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	f240 80e7 	bls.w	8000dac <__udivmoddi4+0x22c>
 8000bde:	3902      	subs	r1, #2
 8000be0:	443b      	add	r3, r7
 8000be2:	1a9a      	subs	r2, r3, r2
 8000be4:	b2a3      	uxth	r3, r4
 8000be6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bf2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bf6:	459c      	cmp	ip, r3
 8000bf8:	d909      	bls.n	8000c0e <__udivmoddi4+0x8e>
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c00:	f080 80d6 	bcs.w	8000db0 <__udivmoddi4+0x230>
 8000c04:	459c      	cmp	ip, r3
 8000c06:	f240 80d3 	bls.w	8000db0 <__udivmoddi4+0x230>
 8000c0a:	443b      	add	r3, r7
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c12:	eba3 030c 	sub.w	r3, r3, ip
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11d      	cbz	r5, 8000c22 <__udivmoddi4+0xa2>
 8000c1a:	40f3      	lsrs	r3, r6
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d905      	bls.n	8000c36 <__udivmoddi4+0xb6>
 8000c2a:	b10d      	cbz	r5, 8000c30 <__udivmoddi4+0xb0>
 8000c2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c30:	2100      	movs	r1, #0
 8000c32:	4608      	mov	r0, r1
 8000c34:	e7f5      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c36:	fab3 f183 	clz	r1, r3
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d146      	bne.n	8000ccc <__udivmoddi4+0x14c>
 8000c3e:	4573      	cmp	r3, lr
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xc8>
 8000c42:	4282      	cmp	r2, r0
 8000c44:	f200 8105 	bhi.w	8000e52 <__udivmoddi4+0x2d2>
 8000c48:	1a84      	subs	r4, r0, r2
 8000c4a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	4690      	mov	r8, r2
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	d0e5      	beq.n	8000c22 <__udivmoddi4+0xa2>
 8000c56:	e9c5 4800 	strd	r4, r8, [r5]
 8000c5a:	e7e2      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f000 8090 	beq.w	8000d82 <__udivmoddi4+0x202>
 8000c62:	fab2 f682 	clz	r6, r2
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f040 80a4 	bne.w	8000db4 <__udivmoddi4+0x234>
 8000c6c:	1a8a      	subs	r2, r1, r2
 8000c6e:	0c03      	lsrs	r3, r0, #16
 8000c70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c74:	b280      	uxth	r0, r0
 8000c76:	b2bc      	uxth	r4, r7
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c7e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c86:	fb04 f20c 	mul.w	r2, r4, ip
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x11e>
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c94:	d202      	bcs.n	8000c9c <__udivmoddi4+0x11c>
 8000c96:	429a      	cmp	r2, r3
 8000c98:	f200 80e0 	bhi.w	8000e5c <__udivmoddi4+0x2dc>
 8000c9c:	46c4      	mov	ip, r8
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ca4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ca8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cac:	fb02 f404 	mul.w	r4, r2, r4
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x144>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x142>
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	f200 80ca 	bhi.w	8000e56 <__udivmoddi4+0x2d6>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	1b1b      	subs	r3, r3, r4
 8000cc6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cca:	e7a5      	b.n	8000c18 <__udivmoddi4+0x98>
 8000ccc:	f1c1 0620 	rsb	r6, r1, #32
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	fa0e f401 	lsl.w	r4, lr, r1
 8000cdc:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ce4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ce8:	4323      	orrs	r3, r4
 8000cea:	fa00 f801 	lsl.w	r8, r0, r1
 8000cee:	fa1f fc87 	uxth.w	ip, r7
 8000cf2:	fbbe f0f9 	udiv	r0, lr, r9
 8000cf6:	0c1c      	lsrs	r4, r3, #16
 8000cf8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cfc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d00:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d04:	45a6      	cmp	lr, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	d909      	bls.n	8000d20 <__udivmoddi4+0x1a0>
 8000d0c:	193c      	adds	r4, r7, r4
 8000d0e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d12:	f080 809c 	bcs.w	8000e4e <__udivmoddi4+0x2ce>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f240 8099 	bls.w	8000e4e <__udivmoddi4+0x2ce>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	443c      	add	r4, r7
 8000d20:	eba4 040e 	sub.w	r4, r4, lr
 8000d24:	fa1f fe83 	uxth.w	lr, r3
 8000d28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d30:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d34:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d38:	45a4      	cmp	ip, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x1ce>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d42:	f080 8082 	bcs.w	8000e4a <__udivmoddi4+0x2ca>
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d97f      	bls.n	8000e4a <__udivmoddi4+0x2ca>
 8000d4a:	3b02      	subs	r3, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d52:	eba4 040c 	sub.w	r4, r4, ip
 8000d56:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d5a:	4564      	cmp	r4, ip
 8000d5c:	4673      	mov	r3, lr
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	d362      	bcc.n	8000e28 <__udivmoddi4+0x2a8>
 8000d62:	d05f      	beq.n	8000e24 <__udivmoddi4+0x2a4>
 8000d64:	b15d      	cbz	r5, 8000d7e <__udivmoddi4+0x1fe>
 8000d66:	ebb8 0203 	subs.w	r2, r8, r3
 8000d6a:	eb64 0409 	sbc.w	r4, r4, r9
 8000d6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d72:	fa22 f301 	lsr.w	r3, r2, r1
 8000d76:	431e      	orrs	r6, r3
 8000d78:	40cc      	lsrs	r4, r1
 8000d7a:	e9c5 6400 	strd	r6, r4, [r5]
 8000d7e:	2100      	movs	r1, #0
 8000d80:	e74f      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000d82:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d86:	0c01      	lsrs	r1, r0, #16
 8000d88:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d92:	463b      	mov	r3, r7
 8000d94:	4638      	mov	r0, r7
 8000d96:	463c      	mov	r4, r7
 8000d98:	46b8      	mov	r8, r7
 8000d9a:	46be      	mov	lr, r7
 8000d9c:	2620      	movs	r6, #32
 8000d9e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000da2:	eba2 0208 	sub.w	r2, r2, r8
 8000da6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000daa:	e766      	b.n	8000c7a <__udivmoddi4+0xfa>
 8000dac:	4601      	mov	r1, r0
 8000dae:	e718      	b.n	8000be2 <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e72c      	b.n	8000c0e <__udivmoddi4+0x8e>
 8000db4:	f1c6 0220 	rsb	r2, r6, #32
 8000db8:	fa2e f302 	lsr.w	r3, lr, r2
 8000dbc:	40b7      	lsls	r7, r6
 8000dbe:	40b1      	lsls	r1, r6
 8000dc0:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dce:	b2bc      	uxth	r4, r7
 8000dd0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dd4:	0c11      	lsrs	r1, r2, #16
 8000dd6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dda:	fb08 f904 	mul.w	r9, r8, r4
 8000dde:	40b0      	lsls	r0, r6
 8000de0:	4589      	cmp	r9, r1
 8000de2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000de6:	b280      	uxth	r0, r0
 8000de8:	d93e      	bls.n	8000e68 <__udivmoddi4+0x2e8>
 8000dea:	1879      	adds	r1, r7, r1
 8000dec:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000df0:	d201      	bcs.n	8000df6 <__udivmoddi4+0x276>
 8000df2:	4589      	cmp	r9, r1
 8000df4:	d81f      	bhi.n	8000e36 <__udivmoddi4+0x2b6>
 8000df6:	eba1 0109 	sub.w	r1, r1, r9
 8000dfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfe:	fb09 f804 	mul.w	r8, r9, r4
 8000e02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e06:	b292      	uxth	r2, r2
 8000e08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e0c:	4542      	cmp	r2, r8
 8000e0e:	d229      	bcs.n	8000e64 <__udivmoddi4+0x2e4>
 8000e10:	18ba      	adds	r2, r7, r2
 8000e12:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e16:	d2c4      	bcs.n	8000da2 <__udivmoddi4+0x222>
 8000e18:	4542      	cmp	r2, r8
 8000e1a:	d2c2      	bcs.n	8000da2 <__udivmoddi4+0x222>
 8000e1c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e20:	443a      	add	r2, r7
 8000e22:	e7be      	b.n	8000da2 <__udivmoddi4+0x222>
 8000e24:	45f0      	cmp	r8, lr
 8000e26:	d29d      	bcs.n	8000d64 <__udivmoddi4+0x1e4>
 8000e28:	ebbe 0302 	subs.w	r3, lr, r2
 8000e2c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e30:	3801      	subs	r0, #1
 8000e32:	46e1      	mov	r9, ip
 8000e34:	e796      	b.n	8000d64 <__udivmoddi4+0x1e4>
 8000e36:	eba7 0909 	sub.w	r9, r7, r9
 8000e3a:	4449      	add	r1, r9
 8000e3c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e40:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e44:	fb09 f804 	mul.w	r8, r9, r4
 8000e48:	e7db      	b.n	8000e02 <__udivmoddi4+0x282>
 8000e4a:	4673      	mov	r3, lr
 8000e4c:	e77f      	b.n	8000d4e <__udivmoddi4+0x1ce>
 8000e4e:	4650      	mov	r0, sl
 8000e50:	e766      	b.n	8000d20 <__udivmoddi4+0x1a0>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e6fd      	b.n	8000c52 <__udivmoddi4+0xd2>
 8000e56:	443b      	add	r3, r7
 8000e58:	3a02      	subs	r2, #2
 8000e5a:	e733      	b.n	8000cc4 <__udivmoddi4+0x144>
 8000e5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e60:	443b      	add	r3, r7
 8000e62:	e71c      	b.n	8000c9e <__udivmoddi4+0x11e>
 8000e64:	4649      	mov	r1, r9
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x222>
 8000e68:	eba1 0109 	sub.w	r1, r1, r9
 8000e6c:	46c4      	mov	ip, r8
 8000e6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e72:	fb09 f804 	mul.w	r8, r9, r4
 8000e76:	e7c4      	b.n	8000e02 <__udivmoddi4+0x282>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f001 fa4d 	bl	8002320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 f88f 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f000 fb8d 	bl	80015a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e8e:	f000 f8fd 	bl	800108c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e92:	f000 f983 	bl	800119c <MX_TIM3_Init>
  MX_TIM12_Init();
 8000e96:	f000 fb19 	bl	80014cc <MX_TIM12_Init>
  MX_TIM4_Init();
 8000e9a:	f000 fa07 	bl	80012ac <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e9e:	f000 fa59 	bl	8001354 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000ea2:	f000 fabb 	bl	800141c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  // ✅ More aggressive base gains for faster response
  MotorController_Setup(&motor1, &htim2, &htim12, 
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8000f80 <main+0x104>
 8000eae:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8000f84 <main+0x108>
 8000eb2:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	4a33      	ldr	r2, [pc, #204]	@ (8000f88 <main+0x10c>)
 8000eba:	4934      	ldr	r1, [pc, #208]	@ (8000f8c <main+0x110>)
 8000ebc:	4834      	ldr	r0, [pc, #208]	@ (8000f90 <main+0x114>)
 8000ebe:	f000 fbbd 	bl	800163c <MotorController_Setup>
                       TIM_CHANNEL_1,    // Timer12 CH1 - Forward
                       TIM_CHANNEL_2,    // Timer12 CH2 - Backward  
					   2.5, 0.4, 0.05);  // Kp=2.5, Ki=0.4 (increased from 0.05), Kd=0.05

  
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000ec2:	213c      	movs	r1, #60	@ 0x3c
 8000ec4:	4831      	ldr	r0, [pc, #196]	@ (8000f8c <main+0x110>)
 8000ec6:	f002 fd4b 	bl	8003960 <HAL_TIM_Encoder_Start>

  // Enable motor controller
  MotorController_Enable(&motor1);
 8000eca:	4831      	ldr	r0, [pc, #196]	@ (8000f90 <main+0x114>)
 8000ecc:	f000 fc3f 	bl	800174e <MotorController_Enable>
  
  
  MotorController_SetTargetRPM(&motor1, 130);  // Tăng từ 50 lên 100
 8000ed0:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8000f94 <main+0x118>
 8000ed4:	482e      	ldr	r0, [pc, #184]	@ (8000f90 <main+0x114>)
 8000ed6:	f000 fc56 	bl	8001786 <MotorController_SetTargetRPM>

  last_update_time = HAL_GetTick();
 8000eda:	f001 fa87 	bl	80023ec <HAL_GetTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8000f98 <main+0x11c>)
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t current_time = HAL_GetTick();
 8000ee4:	f001 fa82 	bl	80023ec <HAL_GetTick>
 8000ee8:	60f8      	str	r0, [r7, #12]
    uint32_t dt = current_time - last_update_time;
 8000eea:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <main+0x11c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	60bb      	str	r3, [r7, #8]
    
    if (dt >= 10) {
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2b09      	cmp	r3, #9
 8000ef8:	d93d      	bls.n	8000f76 <main+0xfa>
        MotorController_Update(&motor1, dt);
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	4824      	ldr	r0, [pc, #144]	@ (8000f90 <main+0x114>)
 8000efe:	f000 fc51 	bl	80017a4 <MotorController_Update>
        current_rpm = MotorController_GetRPM(&motor1);
 8000f02:	4823      	ldr	r0, [pc, #140]	@ (8000f90 <main+0x114>)
 8000f04:	f000 fe80 	bl	8001c08 <MotorController_GetRPM>
 8000f08:	eef0 7a40 	vmov.f32	s15, s0
 8000f0c:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <main+0x120>)
 8000f0e:	edc3 7a00 	vstr	s15, [r3]
        last_update_time = current_time;
 8000f12:	4a21      	ldr	r2, [pc, #132]	@ (8000f98 <main+0x11c>)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6013      	str	r3, [r2, #0]
        
        // ✅ MORE AGGRESSIVE: Reset integral periodically
        static uint32_t reset_counter = 0;
        reset_counter++;
 8000f18:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <main+0x124>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	4a20      	ldr	r2, [pc, #128]	@ (8000fa0 <main+0x124>)
 8000f20:	6013      	str	r3, [r2, #0]
        
        if (reset_counter >= 500) {  // Every 5 seconds
 8000f22:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <main+0x124>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f2a:	d30c      	bcc.n	8000f46 <main+0xca>
            motor1.integral *= 0.1f;  // Reduce integral by 90%
 8000f2c:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <main+0x114>)
 8000f2e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000f32:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000fa4 <main+0x128>
 8000f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <main+0x114>)
 8000f3c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
            reset_counter = 0;
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <main+0x124>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
        }
        
        // ✅ IMMEDIATE reset if motor is very close to target
        float error = fabs(130.0f - current_rpm);
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <main+0x120>)
 8000f48:	edd3 7a00 	vldr	s15, [r3]
 8000f4c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000f94 <main+0x118>
 8000f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f54:	eef0 7ae7 	vabs.f32	s15, s15
 8000f58:	edc7 7a01 	vstr	s15, [r7, #4]
        if (error < 0.5f) {
 8000f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f60:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6c:	d503      	bpl.n	8000f76 <main+0xfa>
            motor1.integral = 0;  // Immediate reset when very close
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <main+0x114>)
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }
    
    HAL_Delay(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f001 fa44 	bl	8002404 <HAL_Delay>
  {
 8000f7c:	e7b2      	b.n	8000ee4 <main+0x68>
 8000f7e:	bf00      	nop
 8000f80:	3d4ccccd 	.word	0x3d4ccccd
 8000f84:	3ecccccd 	.word	0x3ecccccd
 8000f88:	20000190 	.word	0x20000190
 8000f8c:	20000028 	.word	0x20000028
 8000f90:	200001d8 	.word	0x200001d8
 8000f94:	43020000 	.word	0x43020000
 8000f98:	2000020c 	.word	0x2000020c
 8000f9c:	20000210 	.word	0x20000210
 8000fa0:	20000214 	.word	0x20000214
 8000fa4:	3dcccccd 	.word	0x3dcccccd

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	@ 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	2234      	movs	r2, #52	@ 0x34
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fa7c 	bl	80044b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001084 <SystemClock_Config+0xdc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001084 <SystemClock_Config+0xdc>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fdc:	4b29      	ldr	r3, [pc, #164]	@ (8001084 <SystemClock_Config+0xdc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	4b26      	ldr	r3, [pc, #152]	@ (8001088 <SystemClock_Config+0xe0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a25      	ldr	r2, [pc, #148]	@ (8001088 <SystemClock_Config+0xe0>)
 8000ff2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <SystemClock_Config+0xe0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001004:	2301      	movs	r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001008:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800100c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001012:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001016:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001018:	2304      	movs	r3, #4
 800101a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800101c:	23b4      	movs	r3, #180	@ 0xb4
 800101e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001024:	2302      	movs	r3, #2
 8001026:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001028:	2302      	movs	r3, #2
 800102a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4618      	mov	r0, r3
 8001032:	f001 ffeb 	bl	800300c <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800103c:	f000 faf8 	bl	8001630 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001040:	f001 fc7e 	bl	8002940 <HAL_PWREx_EnableOverDrive>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800104a:	f000 faf1 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001052:	2302      	movs	r3, #2
 8001054:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800105a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800105e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001060:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001064:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2105      	movs	r1, #5
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fcb7 	bl	80029e0 <HAL_RCC_ClockConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001078:	f000 fada 	bl	8001630 <Error_Handler>
  }
}
 800107c:	bf00      	nop
 800107e:	3750      	adds	r7, #80	@ 0x50
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b092      	sub	sp, #72	@ 0x48
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001096:	2224      	movs	r2, #36	@ 0x24
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fa0a 	bl	80044b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010aa:	463b      	mov	r3, r7
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
 80010b8:	615a      	str	r2, [r3, #20]
 80010ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_TIM2_Init+0x10c>)
 80010be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80010c4:	4b34      	ldr	r3, [pc, #208]	@ (8001198 <MX_TIM2_Init+0x10c>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <MX_TIM2_Init+0x10c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 45000-1;
 80010d0:	4b31      	ldr	r3, [pc, #196]	@ (8001198 <MX_TIM2_Init+0x10c>)
 80010d2:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 80010d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <MX_TIM2_Init+0x10c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b2e      	ldr	r3, [pc, #184]	@ (8001198 <MX_TIM2_Init+0x10c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <MX_TIM2_Init+0x10c>)
 80010e6:	f002 fa7e 	bl	80035e6 <HAL_TIM_PWM_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010f0:	f000 fa9e 	bl	8001630 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001108:	2300      	movs	r3, #0
 800110a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800110c:	2301      	movs	r3, #1
 800110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	481e      	ldr	r0, [pc, #120]	@ (8001198 <MX_TIM2_Init+0x10c>)
 8001120:	f002 fb78 	bl	8003814 <HAL_TIM_Encoder_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800112a:	f000 fa81 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	4816      	ldr	r0, [pc, #88]	@ (8001198 <MX_TIM2_Init+0x10c>)
 800113e:	f003 f93d 	bl	80043bc <HAL_TIMEx_MasterConfigSynchronization>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8001148:	f000 fa72 	bl	8001630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114c:	2360      	movs	r3, #96	@ 0x60
 800114e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	2208      	movs	r2, #8
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_TIM2_Init+0x10c>)
 8001164:	f002 fc8a 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800116e:	f000 fa5f 	bl	8001630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	220c      	movs	r2, #12
 8001176:	4619      	mov	r1, r3
 8001178:	4807      	ldr	r0, [pc, #28]	@ (8001198 <MX_TIM2_Init+0x10c>)
 800117a:	f002 fc7f 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8001184:	f000 fa54 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001188:	4803      	ldr	r0, [pc, #12]	@ (8001198 <MX_TIM2_Init+0x10c>)
 800118a:	f000 ffaf 	bl	80020ec <HAL_TIM_MspPostInit>

}
 800118e:	bf00      	nop
 8001190:	3748      	adds	r7, #72	@ 0x48
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000028 	.word	0x20000028

0800119c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b092      	sub	sp, #72	@ 0x48
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a6:	2224      	movs	r2, #36	@ 0x24
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 f982 	bl	80044b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011cc:	4b35      	ldr	r3, [pc, #212]	@ (80012a4 <MX_TIM3_Init+0x108>)
 80011ce:	4a36      	ldr	r2, [pc, #216]	@ (80012a8 <MX_TIM3_Init+0x10c>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80011d2:	4b34      	ldr	r3, [pc, #208]	@ (80012a4 <MX_TIM3_Init+0x108>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b32      	ldr	r3, [pc, #200]	@ (80012a4 <MX_TIM3_Init+0x108>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 45000-1;
 80011de:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <MX_TIM3_Init+0x108>)
 80011e0:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 80011e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <MX_TIM3_Init+0x108>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b2d      	ldr	r3, [pc, #180]	@ (80012a4 <MX_TIM3_Init+0x108>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f2:	482c      	ldr	r0, [pc, #176]	@ (80012a4 <MX_TIM3_Init+0x108>)
 80011f4:	f002 f9f7 	bl	80035e6 <HAL_TIM_PWM_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80011fe:	f000 fa17 	bl	8001630 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001202:	2301      	movs	r3, #1
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800120a:	2301      	movs	r3, #1
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001216:	2300      	movs	r3, #0
 8001218:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800121a:	2301      	movs	r3, #1
 800121c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122a:	4619      	mov	r1, r3
 800122c:	481d      	ldr	r0, [pc, #116]	@ (80012a4 <MX_TIM3_Init+0x108>)
 800122e:	f002 faf1 	bl	8003814 <HAL_TIM_Encoder_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001238:	f000 f9fa 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4816      	ldr	r0, [pc, #88]	@ (80012a4 <MX_TIM3_Init+0x108>)
 800124c:	f003 f8b6 	bl	80043bc <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8001256:	f000 f9eb 	bl	8001630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125a:	2360      	movs	r3, #96	@ 0x60
 800125c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800126a:	463b      	mov	r3, r7
 800126c:	2208      	movs	r2, #8
 800126e:	4619      	mov	r1, r3
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <MX_TIM3_Init+0x108>)
 8001272:	f002 fc03 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800127c:	f000 f9d8 	bl	8001630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	220c      	movs	r2, #12
 8001284:	4619      	mov	r1, r3
 8001286:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <MX_TIM3_Init+0x108>)
 8001288:	f002 fbf8 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8001292:	f000 f9cd 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001296:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <MX_TIM3_Init+0x108>)
 8001298:	f000 ff28 	bl	80020ec <HAL_TIM_MspPostInit>

}
 800129c:	bf00      	nop
 800129e:	3748      	adds	r7, #72	@ 0x48
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000070 	.word	0x20000070
 80012a8:	40000400 	.word	0x40000400

080012ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	@ 0x30
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2224      	movs	r2, #36	@ 0x24
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 f8fa 	bl	80044b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012c8:	4b20      	ldr	r3, [pc, #128]	@ (800134c <MX_TIM4_Init+0xa0>)
 80012ca:	4a21      	ldr	r2, [pc, #132]	@ (8001350 <MX_TIM4_Init+0xa4>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <MX_TIM4_Init+0xa0>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <MX_TIM4_Init+0xa0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 45000-1;
 80012da:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <MX_TIM4_Init+0xa0>)
 80012dc:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 80012e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <MX_TIM4_Init+0xa0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <MX_TIM4_Init+0xa0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001306:	2301      	movs	r3, #1
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <MX_TIM4_Init+0xa0>)
 800131a:	f002 fa7b 	bl	8003814 <HAL_TIM_Encoder_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001324:	f000 f984 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_TIM4_Init+0xa0>)
 8001336:	f003 f841 	bl	80043bc <HAL_TIMEx_MasterConfigSynchronization>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001340:	f000 f976 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	@ 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200000b8 	.word	0x200000b8
 8001350:	40000800 	.word	0x40000800

08001354 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	@ 0x28
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001376:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <MX_TIM5_Init+0xc0>)
 8001378:	4a27      	ldr	r2, [pc, #156]	@ (8001418 <MX_TIM5_Init+0xc4>)
 800137a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 800137c:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <MX_TIM5_Init+0xc0>)
 800137e:	2201      	movs	r2, #1
 8001380:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <MX_TIM5_Init+0xc0>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 45000-1;
 8001388:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <MX_TIM5_Init+0xc0>)
 800138a:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 800138e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <MX_TIM5_Init+0xc0>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <MX_TIM5_Init+0xc0>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800139c:	481d      	ldr	r0, [pc, #116]	@ (8001414 <MX_TIM5_Init+0xc0>)
 800139e:	f002 f922 	bl	80035e6 <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80013a8:	f000 f942 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	4619      	mov	r1, r3
 80013ba:	4816      	ldr	r0, [pc, #88]	@ (8001414 <MX_TIM5_Init+0xc0>)
 80013bc:	f002 fffe 	bl	80043bc <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80013c6:	f000 f933 	bl	8001630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ca:	2360      	movs	r3, #96	@ 0x60
 80013cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2208      	movs	r2, #8
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <MX_TIM5_Init+0xc0>)
 80013e2:	f002 fb4b 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80013ec:	f000 f920 	bl	8001630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	220c      	movs	r2, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	@ (8001414 <MX_TIM5_Init+0xc0>)
 80013f8:	f002 fb40 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001402:	f000 f915 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001406:	4803      	ldr	r0, [pc, #12]	@ (8001414 <MX_TIM5_Init+0xc0>)
 8001408:	f000 fe70 	bl	80020ec <HAL_TIM_MspPostInit>

}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	@ 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000100 	.word	0x20000100
 8001418:	40000c00 	.word	0x40000c00

0800141c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	@ 0x30
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2224      	movs	r2, #36	@ 0x24
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f003 f842 	bl	80044b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001438:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <MX_TIM8_Init+0xa8>)
 800143a:	4a23      	ldr	r2, [pc, #140]	@ (80014c8 <MX_TIM8_Init+0xac>)
 800143c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 800143e:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <MX_TIM8_Init+0xa8>)
 8001440:	2201      	movs	r2, #1
 8001442:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <MX_TIM8_Init+0xa8>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 45000-1;
 800144a:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <MX_TIM8_Init+0xa8>)
 800144c:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 8001450:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <MX_TIM8_Init+0xa8>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001458:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <MX_TIM8_Init+0xa8>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <MX_TIM8_Init+0xa8>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001464:	2301      	movs	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800146c:	2301      	movs	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800147c:	2301      	movs	r3, #1
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	@ (80014c4 <MX_TIM8_Init+0xa8>)
 8001490:	f002 f9c0 	bl	8003814 <HAL_TIM_Encoder_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800149a:	f000 f8c9 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	@ (80014c4 <MX_TIM8_Init+0xa8>)
 80014ac:	f002 ff86 	bl	80043bc <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80014b6:	f000 f8bb 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3730      	adds	r7, #48	@ 0x30
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000148 	.word	0x20000148
 80014c8:	40010400 	.word	0x40010400

080014cc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08c      	sub	sp, #48	@ 0x30
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014f2:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <MX_TIM12_Init+0xd4>)
 80014f4:	4a2b      	ldr	r2, [pc, #172]	@ (80015a4 <MX_TIM12_Init+0xd8>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80014f8:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <MX_TIM12_Init+0xd4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b28      	ldr	r3, [pc, #160]	@ (80015a0 <MX_TIM12_Init+0xd4>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 45000-1;
 8001504:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <MX_TIM12_Init+0xd4>)
 8001506:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 800150a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <MX_TIM12_Init+0xd4>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <MX_TIM12_Init+0xd4>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001518:	4821      	ldr	r0, [pc, #132]	@ (80015a0 <MX_TIM12_Init+0xd4>)
 800151a:	f002 f815 	bl	8003548 <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001524:	f000 f884 	bl	8001630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800152c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800152e:	f107 0320 	add.w	r3, r7, #32
 8001532:	4619      	mov	r1, r3
 8001534:	481a      	ldr	r0, [pc, #104]	@ (80015a0 <MX_TIM12_Init+0xd4>)
 8001536:	f002 fb63 	bl	8003c00 <HAL_TIM_ConfigClockSource>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001540:	f000 f876 	bl	8001630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001544:	4816      	ldr	r0, [pc, #88]	@ (80015a0 <MX_TIM12_Init+0xd4>)
 8001546:	f002 f84e 	bl	80035e6 <HAL_TIM_PWM_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001550:	f000 f86e 	bl	8001630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001554:	2360      	movs	r3, #96	@ 0x60
 8001556:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <MX_TIM12_Init+0xd4>)
 800156c:	f002 fa86 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001576:	f000 f85b 	bl	8001630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2204      	movs	r2, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4807      	ldr	r0, [pc, #28]	@ (80015a0 <MX_TIM12_Init+0xd4>)
 8001582:	f002 fa7b 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 800158c:	f000 f850 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001590:	4803      	ldr	r0, [pc, #12]	@ (80015a0 <MX_TIM12_Init+0xd4>)
 8001592:	f000 fdab 	bl	80020ec <HAL_TIM_MspPostInit>

}
 8001596:	bf00      	nop
 8001598:	3730      	adds	r7, #48	@ 0x30
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000190 	.word	0x20000190
 80015a4:	40001800 	.word	0x40001800

080015a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <MX_GPIO_Init+0x84>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a1d      	ldr	r2, [pc, #116]	@ (800162c <MX_GPIO_Init+0x84>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <MX_GPIO_Init+0x84>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <MX_GPIO_Init+0x84>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a16      	ldr	r2, [pc, #88]	@ (800162c <MX_GPIO_Init+0x84>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b14      	ldr	r3, [pc, #80]	@ (800162c <MX_GPIO_Init+0x84>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <MX_GPIO_Init+0x84>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a0f      	ldr	r2, [pc, #60]	@ (800162c <MX_GPIO_Init+0x84>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <MX_GPIO_Init+0x84>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_GPIO_Init+0x84>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a08      	ldr	r2, [pc, #32]	@ (800162c <MX_GPIO_Init+0x84>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_GPIO_Init+0x84>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <Error_Handler+0x8>

0800163c <MotorController_Setup>:

void MotorController_Setup(MotorController *mc,
                          TIM_HandleTypeDef *enc_tim,
                          TIM_HandleTypeDef *pwm_tim,
                          uint32_t ch_fwd, uint32_t ch_bwd,
                          float kp, float ki, float kd) {
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	61f8      	str	r0, [r7, #28]
 8001644:	61b9      	str	r1, [r7, #24]
 8001646:	617a      	str	r2, [r7, #20]
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	ed87 0a03 	vstr	s0, [r7, #12]
 800164e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001652:	ed87 1a01 	vstr	s2, [r7, #4]
    mc->encoder_timer = enc_tim;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	601a      	str	r2, [r3, #0]
    mc->pwm_timer = pwm_tim;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	605a      	str	r2, [r3, #4]
    mc->pwm_channel_forward = ch_fwd;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	609a      	str	r2, [r3, #8]
    mc->pwm_channel_backward = ch_bwd;
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800166c:	60da      	str	r2, [r3, #12]
    
    mc->kp = kp;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	611a      	str	r2, [r3, #16]
    mc->ki = ki;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	615a      	str	r2, [r3, #20]
    mc->kd = kd;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
    
    mc->last_count = __HAL_TIM_GET_COUNTER(mc->encoder_timer);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	461a      	mov	r2, r3
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	62da      	str	r2, [r3, #44]	@ 0x2c
    mc->integral = 0;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24
    mc->previous_error = 0;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28
    mc->target_rpm = 0;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
    mc->current_rpm = 0;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	621a      	str	r2, [r3, #32]
    mc->is_enabled = 0;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    
    // Stop PWM
    __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_forward, 0);
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d105      	bne.n	80016ca <MotorController_Setup+0x8e>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2200      	movs	r2, #0
 80016c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80016c8:	e018      	b.n	80016fc <MotorController_Setup+0xc0>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d105      	bne.n	80016de <MotorController_Setup+0xa2>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2300      	movs	r3, #0
 80016da:	6393      	str	r3, [r2, #56]	@ 0x38
 80016dc:	e00e      	b.n	80016fc <MotorController_Setup+0xc0>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d105      	bne.n	80016f2 <MotorController_Setup+0xb6>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2300      	movs	r3, #0
 80016ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80016f0:	e004      	b.n	80016fc <MotorController_Setup+0xc0>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2300      	movs	r3, #0
 80016fa:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, 0);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <MotorController_Setup+0xd4>
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800170e:	e018      	b.n	8001742 <MotorController_Setup+0x106>
    __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, 0);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b04      	cmp	r3, #4
 8001716:	d105      	bne.n	8001724 <MotorController_Setup+0xe8>
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2300      	movs	r3, #0
 8001720:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001722:	e00e      	b.n	8001742 <MotorController_Setup+0x106>
    __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, 0);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b08      	cmp	r3, #8
 800172a:	d105      	bne.n	8001738 <MotorController_Setup+0xfc>
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	2300      	movs	r3, #0
 8001734:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001736:	e004      	b.n	8001742 <MotorController_Setup+0x106>
    __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, 0);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2300      	movs	r3, #0
 8001740:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001742:	bf00      	nop
 8001744:	3724      	adds	r7, #36	@ 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <MotorController_Enable>:

void MotorController_Enable(MotorController *mc) {
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
    mc->is_enabled = 1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    HAL_TIM_PWM_Start(mc->pwm_timer, mc->pwm_channel_forward);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	4619      	mov	r1, r3
 8001768:	4610      	mov	r0, r2
 800176a:	f001 ff8b 	bl	8003684 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(mc->pwm_timer, mc->pwm_channel_backward);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	4619      	mov	r1, r3
 8001778:	4610      	mov	r0, r2
 800177a:	f001 ff83 	bl	8003684 <HAL_TIM_PWM_Start>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <MotorController_SetTargetRPM>:
    __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, 0);
    HAL_TIM_PWM_Stop(mc->pwm_timer, mc->pwm_channel_forward);
    HAL_TIM_PWM_Stop(mc->pwm_timer, mc->pwm_channel_backward);
}

void MotorController_SetTargetRPM(MotorController *mc, float rpm) {
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	ed87 0a00 	vstr	s0, [r7]
    mc->target_rpm = rpm;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	61da      	str	r2, [r3, #28]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <MotorController_Update>:

// PID controller update function
void MotorController_Update(MotorController *mc, uint32_t dt_ms) {
 80017a4:	b5b0      	push	{r4, r5, r7, lr}
 80017a6:	b094      	sub	sp, #80	@ 0x50
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
    // Read encoder
    uint32_t curr = __HAL_TIM_GET_COUNTER(mc->encoder_timer);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	643b      	str	r3, [r7, #64]	@ 0x40
    int32_t diff = (int32_t)((curr - mc->last_count + 22500) % 45000) - 22500;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017bc:	461a      	mov	r2, r3
 80017be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017c0:	1a9b      	subs	r3, r3, r2
 80017c2:	f503 43af 	add.w	r3, r3, #22400	@ 0x5780
 80017c6:	3364      	adds	r3, #100	@ 0x64
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	49c1      	ldr	r1, [pc, #772]	@ (8001ad0 <MotorController_Update+0x32c>)
 80017cc:	fba1 1202 	umull	r1, r2, r1, r2
 80017d0:	09d2      	lsrs	r2, r2, #7
 80017d2:	f64a 71c8 	movw	r1, #45000	@ 0xafc8
 80017d6:	fb01 f202 	mul.w	r2, r1, r2
 80017da:	1a9a      	subs	r2, r3, r2
 80017dc:	4613      	mov	r3, r2
 80017de:	f5a3 43af 	sub.w	r3, r3, #22400	@ 0x5780
 80017e2:	3b64      	subs	r3, #100	@ 0x64
 80017e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    mc->last_count = curr;
 80017e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    // Calculate RPM
    float new_rpm = ((float)diff * 60000.0f) / (515 * dt_ms);
 80017ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017ee:	ee07 3a90 	vmov	s15, r3
 80017f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f6:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 8001ad4 <MotorController_Update+0x330>
 80017fa:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	4613      	mov	r3, r2
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	4413      	add	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001816:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    
    // ✅ Faster filtering
    mc->current_rpm = mc->current_rpm * 0.6f + new_rpm * 0.4f;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001820:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8001ad8 <MotorController_Update+0x334>
 8001824:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001828:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800182c:	eddf 6aab 	vldr	s13, [pc, #684]	@ 8001adc <MotorController_Update+0x338>
 8001830:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	edc3 7a08 	vstr	s15, [r3, #32]
    
    if (!mc->is_enabled) return;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 81cb 	beq.w	8001be0 <MotorController_Update+0x43c>
    
    // ✅ Calculate error
    float error = mc->target_rpm - mc->current_rpm;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	edd3 7a08 	vldr	s15, [r3, #32]
 8001856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float dt_sec = dt_ms / 1000.0f;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001868:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8001ae0 <MotorController_Update+0x33c>
 800186c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001870:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    
    // ✅ IMPROVED: Variable integral gain approach
    // - Uses smaller Ki when close to target
    // - Completely disables integral in a deadband
    float abs_error = fabs(error);
 8001874:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001878:	eef0 7ae7 	vabs.f32	s15, s15
 800187c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float variable_ki = mc->ki;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	64fb      	str	r3, [r7, #76]	@ 0x4c
    
    if (abs_error < 5.0f) {
 8001886:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800188a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800188e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	d518      	bpl.n	80018ca <MotorController_Update+0x126>
        // Reduce integral gain when close to target
        variable_ki = mc->ki * (abs_error / 5.0f);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	ed93 7a05 	vldr	s14, [r3, #20]
 800189e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80018a2:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 80018a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ae:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        
        // ✅ Deadband approach - no integration when very close
        if (abs_error < 1.0f) {
 80018b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c2:	d502      	bpl.n	80018ca <MotorController_Update+0x126>
            variable_ki = 0.0f;  // Disable integral completely
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
    }
    
    // ✅ IMPROVED: Calculate derivative with more filtering
    float derivative = (error - mc->previous_error) / dt_sec;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80018d0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80018d4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018d8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80018dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    
    // ✅ EFFICIENT: Pre-calculate proportional and derivative terms
    float p_term = mc->kp * error;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80018ea:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80018ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float d_term = mc->kd * derivative;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80018fc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001904:	edc7 7a08 	vstr	s15, [r7, #32]
    
    // ✅ EFFICIENT: Calculate what output would be without integral
    float output_without_integral = p_term + d_term;
 8001908:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800190c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001914:	edc7 7a07 	vstr	s15, [r7, #28]
    
    // ✅ BETTER ANTI-WINDUP: Back-calculation method
    float integral_change = 0.0f;
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	64bb      	str	r3, [r7, #72]	@ 0x48
    
    // Only accumulate integral when appropriate
    if (abs_error > 1.0f && fabs(output_without_integral) < 90.0f) {
 800191e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	dd13      	ble.n	8001958 <MotorController_Update+0x1b4>
 8001930:	edd7 7a07 	vldr	s15, [r7, #28]
 8001934:	eef0 7ae7 	vabs.f32	s15, s15
 8001938:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001ae4 <MotorController_Update+0x340>
 800193c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	d508      	bpl.n	8001958 <MotorController_Update+0x1b4>
        // Normal integration
        integral_change = error * dt_sec;
 8001946:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800194a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800194e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001952:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8001956:	e060      	b.n	8001a1a <MotorController_Update+0x276>
    } else {
        // ✅ IMPROVED: Targeted integral reduction
        // Reduces integral exactly to the point where output won't saturate
        if (fabs(mc->integral) > 0.1f) {
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800195e:	eef0 7ae7 	vabs.f32	s15, s15
 8001962:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001ae8 <MotorController_Update+0x344>
 8001966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196e:	dd54      	ble.n	8001a1a <MotorController_Update+0x276>
            // Calculate how much integral action we need to reduce
            float desired_integral = (90.0f - fabs(output_without_integral)) / variable_ki;
 8001970:	edd7 7a07 	vldr	s15, [r7, #28]
 8001974:	eef0 7ae7 	vabs.f32	s15, s15
 8001978:	ee17 0a90 	vmov	r0, s15
 800197c:	f7fe fda6 	bl	80004cc <__aeabi_f2d>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	f04f 0000 	mov.w	r0, #0
 8001988:	4958      	ldr	r1, [pc, #352]	@ (8001aec <MotorController_Update+0x348>)
 800198a:	f7fe fc3f 	bl	800020c <__aeabi_dsub>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001998:	f7fe fd98 	bl	80004cc <__aeabi_f2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	f7fe ff14 	bl	80007d0 <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff f87e 	bl	8000ab0 <__aeabi_d2f>
 80019b4:	4603      	mov	r3, r0
 80019b6:	61bb      	str	r3, [r7, #24]
            desired_integral = fmin(desired_integral, fabs(mc->integral));
 80019b8:	69b8      	ldr	r0, [r7, #24]
 80019ba:	f7fe fd87 	bl	80004cc <__aeabi_f2d>
 80019be:	4604      	mov	r4, r0
 80019c0:	460d      	mov	r5, r1
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80019c8:	eef0 7ae7 	vabs.f32	s15, s15
 80019cc:	ee17 0a90 	vmov	r0, s15
 80019d0:	f7fe fd7c 	bl	80004cc <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	ec43 2b11 	vmov	d1, r2, r3
 80019dc:	ec45 4b10 	vmov	d0, r4, r5
 80019e0:	f002 fd94 	bl	800450c <fmin>
 80019e4:	ec53 2b10 	vmov	r2, r3, d0
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f860 	bl	8000ab0 <__aeabi_d2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	61bb      	str	r3, [r7, #24]
            
            // Make integral decay to this value
            float decay_rate = 0.3f * dt_sec;  // 30% decay per second
 80019f4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80019f8:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001af0 <MotorController_Update+0x34c>
 80019fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a00:	edc7 7a05 	vstr	s15, [r7, #20]
            integral_change = -decay_rate * mc->integral;
 8001a04:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a08:	eeb1 7a67 	vneg.f32	s14, s15
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a16:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        }
    }
    
    // ✅ IMPROVED: Apply variable Ki to integration
    mc->integral += integral_change * variable_ki;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001a20:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001a24:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    
    // ✅ Apply integral limits (avoid unnecessary comparisons when possible)
    if (mc->integral > 50.0f) {
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001a3c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001af4 <MotorController_Update+0x350>
 8001a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	dd03      	ble.n	8001a52 <MotorController_Update+0x2ae>
        mc->integral = 50.0f;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001af8 <MotorController_Update+0x354>)
 8001a4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a50:	e00c      	b.n	8001a6c <MotorController_Update+0x2c8>
    } else if (mc->integral < -50.0f) {
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001a58:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001afc <MotorController_Update+0x358>
 8001a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	d502      	bpl.n	8001a6c <MotorController_Update+0x2c8>
        mc->integral = -50.0f;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4a25      	ldr	r2, [pc, #148]	@ (8001b00 <MotorController_Update+0x35c>)
 8001a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    
    // ✅ IMPROVED: Detect overshoot with hysteresis to avoid oscillation
    static float last_error = 0.0f;
    static uint8_t same_sign_count = 0;
    
    if ((error > 0 && last_error < 0) || (error < 0 && last_error > 0)) {
 8001a6c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a78:	dd07      	ble.n	8001a8a <MotorController_Update+0x2e6>
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <MotorController_Update+0x360>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	d40e      	bmi.n	8001aa8 <MotorController_Update+0x304>
 8001a8a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	d539      	bpl.n	8001b0c <MotorController_Update+0x368>
 8001a98:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <MotorController_Update+0x360>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa6:	dd31      	ble.n	8001b0c <MotorController_Update+0x368>
        // Zero crossing detected (error changed sign) - possible overshoot
        if (fabs(error) > 2.0f) {  // Only reset if significant overshoot
 8001aa8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001aac:	eef0 7ae7 	vabs.f32	s15, s15
 8001ab0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	dd52      	ble.n	8001b64 <MotorController_Update+0x3c0>
            mc->integral = 0.0f;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	@ 0x24
            same_sign_count = 0;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <MotorController_Update+0x364>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
        if (fabs(error) > 2.0f) {  // Only reset if significant overshoot
 8001acc:	e04a      	b.n	8001b64 <MotorController_Update+0x3c0>
 8001ace:	bf00      	nop
 8001ad0:	05d34edf 	.word	0x05d34edf
 8001ad4:	476a6000 	.word	0x476a6000
 8001ad8:	3f19999a 	.word	0x3f19999a
 8001adc:	3ecccccd 	.word	0x3ecccccd
 8001ae0:	447a0000 	.word	0x447a0000
 8001ae4:	42b40000 	.word	0x42b40000
 8001ae8:	3dcccccd 	.word	0x3dcccccd
 8001aec:	40568000 	.word	0x40568000
 8001af0:	3e99999a 	.word	0x3e99999a
 8001af4:	42480000 	.word	0x42480000
 8001af8:	42480000 	.word	0x42480000
 8001afc:	c2480000 	.word	0xc2480000
 8001b00:	c2480000 	.word	0xc2480000
 8001b04:	20000218 	.word	0x20000218
 8001b08:	2000021c 	.word	0x2000021c
        }
    } else {
        // Error still has same sign
        same_sign_count++;
 8001b0c:	4b36      	ldr	r3, [pc, #216]	@ (8001be8 <MotorController_Update+0x444>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b34      	ldr	r3, [pc, #208]	@ (8001be8 <MotorController_Update+0x444>)
 8001b16:	701a      	strb	r2, [r3, #0]
        
        // If error stays same sign for a while, we're not oscillating
        // Allow a small amount of integral to accumulate for steady-state
        if (same_sign_count > 50 && fabs(mc->integral) < 0.1f && abs_error > 1.0f) {
 8001b18:	4b33      	ldr	r3, [pc, #204]	@ (8001be8 <MotorController_Update+0x444>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b32      	cmp	r3, #50	@ 0x32
 8001b1e:	d921      	bls.n	8001b64 <MotorController_Update+0x3c0>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001b26:	eef0 7ae7 	vabs.f32	s15, s15
 8001b2a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001bec <MotorController_Update+0x448>
 8001b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	d515      	bpl.n	8001b64 <MotorController_Update+0x3c0>
 8001b38:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	dd0c      	ble.n	8001b64 <MotorController_Update+0x3c0>
            // Small nudge to overcome steady-state error
            mc->integral = (error > 0) ? 1.0f : -1.0f;
 8001b4a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b56:	dd02      	ble.n	8001b5e <MotorController_Update+0x3ba>
 8001b58:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b5c:	e000      	b.n	8001b60 <MotorController_Update+0x3bc>
 8001b5e:	4a24      	ldr	r2, [pc, #144]	@ (8001bf0 <MotorController_Update+0x44c>)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }
    
    last_error = error;
 8001b64:	4a23      	ldr	r2, [pc, #140]	@ (8001bf4 <MotorController_Update+0x450>)
 8001b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b68:	6013      	str	r3, [r2, #0]
    
    // Calculate final output
    float i_term = variable_ki * mc->integral;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001b70:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b78:	edc7 7a04 	vstr	s15, [r7, #16]
    float output = p_term + i_term + d_term;
 8001b7c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b88:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b90:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    
    // Apply output limits
    if (output > 100.0f) output = 100.0f;
 8001b94:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b98:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001bf8 <MotorController_Update+0x454>
 8001b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba4:	dd01      	ble.n	8001baa <MotorController_Update+0x406>
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <MotorController_Update+0x458>)
 8001ba8:	647b      	str	r3, [r7, #68]	@ 0x44
    if (output < -100.0f) output = -100.0f;
 8001baa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001bae:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001c00 <MotorController_Update+0x45c>
 8001bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	d501      	bpl.n	8001bc0 <MotorController_Update+0x41c>
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <MotorController_Update+0x460>)
 8001bbe:	647b      	str	r3, [r7, #68]	@ 0x44
    
    mc->previous_error = error;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001bc4:	629a      	str	r2, [r3, #40]	@ 0x28
    Motor_SetDutyCycle(mc, (int8_t)output);
 8001bc6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001bca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bce:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bd2:	793b      	ldrb	r3, [r7, #4]
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f825 	bl	8001c28 <Motor_SetDutyCycle>
 8001bde:	e000      	b.n	8001be2 <MotorController_Update+0x43e>
    if (!mc->is_enabled) return;
 8001be0:	bf00      	nop
}
 8001be2:	3750      	adds	r7, #80	@ 0x50
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}
 8001be8:	2000021c 	.word	0x2000021c
 8001bec:	3dcccccd 	.word	0x3dcccccd
 8001bf0:	bf800000 	.word	0xbf800000
 8001bf4:	20000218 	.word	0x20000218
 8001bf8:	42c80000 	.word	0x42c80000
 8001bfc:	42c80000 	.word	0x42c80000
 8001c00:	c2c80000 	.word	0xc2c80000
 8001c04:	c2c80000 	.word	0xc2c80000

08001c08 <MotorController_GetRPM>:

float MotorController_GetRPM(MotorController *mc) {
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
    return mc->current_rpm;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	ee07 3a90 	vmov	s15, r3
}
 8001c18:	eeb0 0a67 	vmov.f32	s0, s15
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <Motor_SetDutyCycle>:

// Set the duty cycle for the motor
void Motor_SetDutyCycle(MotorController *mc, int8_t duty_cycle) {
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
    // ✅ Use percentage-based (0-100%) 
    if (duty_cycle > 100) duty_cycle = 100;
 8001c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c38:	2b64      	cmp	r3, #100	@ 0x64
 8001c3a:	dd01      	ble.n	8001c40 <Motor_SetDutyCycle+0x18>
 8001c3c:	2364      	movs	r3, #100	@ 0x64
 8001c3e:	70fb      	strb	r3, [r7, #3]
    if (duty_cycle < -100) duty_cycle = -100;
 8001c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c44:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001c48:	da01      	bge.n	8001c4e <Motor_SetDutyCycle+0x26>
 8001c4a:	239c      	movs	r3, #156	@ 0x9c
 8001c4c:	70fb      	strb	r3, [r7, #3]
    
    // ✅ Remove minimum threshold - let small values pass through
    // No minimum threshold - direct control
    
    // ✅ Calculate PWM value using percentage (0-100%)
    uint32_t pwm_value = (abs(duty_cycle) * MAX_PWM) / 100;
 8001c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bfb8      	it	lt
 8001c56:	425b      	neglt	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f64a 73c7 	movw	r3, #44999	@ 0xafc7
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	4a74      	ldr	r2, [pc, #464]	@ (8001e38 <Motor_SetDutyCycle+0x210>)
 8001c66:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6a:	1152      	asrs	r2, r2, #5
 8001c6c:	17db      	asrs	r3, r3, #31
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	60fb      	str	r3, [r7, #12]
    
    if (duty_cycle > 0) {
 8001c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dd46      	ble.n	8001d08 <Motor_SetDutyCycle+0xe0>
        // Forward
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_forward, pwm_value);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d105      	bne.n	8001c8e <Motor_SetDutyCycle+0x66>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c8c:	e018      	b.n	8001cc0 <Motor_SetDutyCycle+0x98>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d105      	bne.n	8001ca2 <Motor_SetDutyCycle+0x7a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001ca0:	e00e      	b.n	8001cc0 <Motor_SetDutyCycle+0x98>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d105      	bne.n	8001cb6 <Motor_SetDutyCycle+0x8e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001cb4:	e004      	b.n	8001cc0 <Motor_SetDutyCycle+0x98>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, 0);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <Motor_SetDutyCycle+0xac>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
        // Stop
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_forward, 0);
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, 0);
    }
}
 8001cd2:	e0ab      	b.n	8001e2c <Motor_SetDutyCycle+0x204>
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, 0);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d105      	bne.n	8001ce8 <Motor_SetDutyCycle+0xc0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	6393      	str	r3, [r2, #56]	@ 0x38
 8001ce6:	e0a1      	b.n	8001e2c <Motor_SetDutyCycle+0x204>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d105      	bne.n	8001cfc <Motor_SetDutyCycle+0xd4>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001cfa:	e097      	b.n	8001e2c <Motor_SetDutyCycle+0x204>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d06:	e091      	b.n	8001e2c <Motor_SetDutyCycle+0x204>
    } else if (duty_cycle < 0) {
 8001d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da46      	bge.n	8001d9e <Motor_SetDutyCycle+0x176>
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_forward, 0);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <Motor_SetDutyCycle+0xfc>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d22:	e018      	b.n	8001d56 <Motor_SetDutyCycle+0x12e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d105      	bne.n	8001d38 <Motor_SetDutyCycle+0x110>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2300      	movs	r3, #0
 8001d34:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d36:	e00e      	b.n	8001d56 <Motor_SetDutyCycle+0x12e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d105      	bne.n	8001d4c <Motor_SetDutyCycle+0x124>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	2300      	movs	r3, #0
 8001d48:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d4a:	e004      	b.n	8001d56 <Motor_SetDutyCycle+0x12e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2300      	movs	r3, #0
 8001d54:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, pwm_value);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d105      	bne.n	8001d6a <Motor_SetDutyCycle+0x142>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d68:	e060      	b.n	8001e2c <Motor_SetDutyCycle+0x204>
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, pwm_value);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d105      	bne.n	8001d7e <Motor_SetDutyCycle+0x156>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d7c:	e056      	b.n	8001e2c <Motor_SetDutyCycle+0x204>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d105      	bne.n	8001d92 <Motor_SetDutyCycle+0x16a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d90:	e04c      	b.n	8001e2c <Motor_SetDutyCycle+0x204>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d9c:	e046      	b.n	8001e2c <Motor_SetDutyCycle+0x204>
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_forward, 0);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <Motor_SetDutyCycle+0x18a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	635a      	str	r2, [r3, #52]	@ 0x34
 8001db0:	e018      	b.n	8001de4 <Motor_SetDutyCycle+0x1bc>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d105      	bne.n	8001dc6 <Motor_SetDutyCycle+0x19e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6393      	str	r3, [r2, #56]	@ 0x38
 8001dc4:	e00e      	b.n	8001de4 <Motor_SetDutyCycle+0x1bc>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d105      	bne.n	8001dda <Motor_SetDutyCycle+0x1b2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001dd8:	e004      	b.n	8001de4 <Motor_SetDutyCycle+0x1bc>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2300      	movs	r3, #0
 8001de2:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, 0);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <Motor_SetDutyCycle+0x1d0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001df6:	e019      	b.n	8001e2c <Motor_SetDutyCycle+0x204>
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, 0);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d105      	bne.n	8001e0c <Motor_SetDutyCycle+0x1e4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	2300      	movs	r3, #0
 8001e08:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001e0a:	e00f      	b.n	8001e2c <Motor_SetDutyCycle+0x204>
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, 0);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d105      	bne.n	8001e20 <Motor_SetDutyCycle+0x1f8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001e1e:	e005      	b.n	8001e2c <Motor_SetDutyCycle+0x204>
        __HAL_TIM_SET_COMPARE(mc->pwm_timer, mc->pwm_channel_backward, 0);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001e2a:	e7ff      	b.n	8001e2c <Motor_SetDutyCycle+0x204>
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	51eb851f 	.word	0x51eb851f

08001e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e52:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	4a08      	ldr	r2, [pc, #32]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800

08001e8c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08c      	sub	sp, #48	@ 0x30
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eac:	d12c      	bne.n	8001f08 <HAL_TIM_PWM_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	4a39      	ldr	r2, [pc, #228]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ebe:	4b37      	ldr	r3, [pc, #220]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	4b33      	ldr	r3, [pc, #204]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	4a32      	ldr	r2, [pc, #200]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eda:	4b30      	ldr	r3, [pc, #192]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	4619      	mov	r1, r3
 8001f00:	4827      	ldr	r0, [pc, #156]	@ (8001fa0 <HAL_TIM_PWM_MspInit+0x114>)
 8001f02:	f000 fb89 	bl	8002618 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f06:	e044      	b.n	8001f92 <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a25      	ldr	r2, [pc, #148]	@ (8001fa4 <HAL_TIM_PWM_MspInit+0x118>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d12c      	bne.n	8001f6c <HAL_TIM_PWM_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	4a20      	ldr	r2, [pc, #128]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f22:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f4a:	23c0      	movs	r3, #192	@ 0xc0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	480e      	ldr	r0, [pc, #56]	@ (8001fa0 <HAL_TIM_PWM_MspInit+0x114>)
 8001f66:	f000 fb57 	bl	8002618 <HAL_GPIO_Init>
}
 8001f6a:	e012      	b.n	8001f92 <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM5)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa8 <HAL_TIM_PWM_MspInit+0x11c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10d      	bne.n	8001f92 <HAL_TIM_PWM_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	4a07      	ldr	r2, [pc, #28]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x110>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
}
 8001f92:	bf00      	nop
 8001f94:	3730      	adds	r7, #48	@ 0x30
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40000c00 	.word	0x40000c00

08001fac <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08c      	sub	sp, #48	@ 0x30
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a32      	ldr	r2, [pc, #200]	@ (8002094 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d12c      	bne.n	8002028 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	4b31      	ldr	r3, [pc, #196]	@ (8002098 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	4a30      	ldr	r2, [pc, #192]	@ (8002098 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fde:	4b2e      	ldr	r3, [pc, #184]	@ (8002098 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a29      	ldr	r2, [pc, #164]	@ (8002098 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b27      	ldr	r3, [pc, #156]	@ (8002098 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002006:	23c0      	movs	r3, #192	@ 0xc0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002016:	2302      	movs	r3, #2
 8002018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	481e      	ldr	r0, [pc, #120]	@ (800209c <HAL_TIM_Encoder_MspInit+0xf0>)
 8002022:	f000 faf9 	bl	8002618 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002026:	e030      	b.n	800208a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1c      	ldr	r2, [pc, #112]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d12b      	bne.n	800208a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <HAL_TIM_Encoder_MspInit+0xec>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	4a17      	ldr	r2, [pc, #92]	@ (8002098 <HAL_TIM_Encoder_MspInit+0xec>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6453      	str	r3, [r2, #68]	@ 0x44
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_TIM_Encoder_MspInit+0xec>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_TIM_Encoder_MspInit+0xec>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a10      	ldr	r2, [pc, #64]	@ (8002098 <HAL_TIM_Encoder_MspInit+0xec>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <HAL_TIM_Encoder_MspInit+0xec>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800206a:	23c0      	movs	r3, #192	@ 0xc0
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800207a:	2303      	movs	r3, #3
 800207c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	4619      	mov	r1, r3
 8002084:	4807      	ldr	r0, [pc, #28]	@ (80020a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002086:	f000 fac7 	bl	8002618 <HAL_GPIO_Init>
}
 800208a:	bf00      	nop
 800208c:	3730      	adds	r7, #48	@ 0x30
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40000800 	.word	0x40000800
 8002098:	40023800 	.word	0x40023800
 800209c:	40020400 	.word	0x40020400
 80020a0:	40010400 	.word	0x40010400
 80020a4:	40020800 	.word	0x40020800

080020a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0b      	ldr	r2, [pc, #44]	@ (80020e4 <HAL_TIM_Base_MspInit+0x3c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d10d      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <HAL_TIM_Base_MspInit+0x40>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	4a09      	ldr	r2, [pc, #36]	@ (80020e8 <HAL_TIM_Base_MspInit+0x40>)
 80020c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <HAL_TIM_Base_MspInit+0x40>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40001800 	.word	0x40001800
 80020e8:	40023800 	.word	0x40023800

080020ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	@ 0x30
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800210c:	d11f      	bne.n	800214e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	4b47      	ldr	r3, [pc, #284]	@ (8002230 <HAL_TIM_MspPostInit+0x144>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a46      	ldr	r2, [pc, #280]	@ (8002230 <HAL_TIM_MspPostInit+0x144>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b44      	ldr	r3, [pc, #272]	@ (8002230 <HAL_TIM_MspPostInit+0x144>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800212a:	f240 4304 	movw	r3, #1028	@ 0x404
 800212e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800213c:	2301      	movs	r3, #1
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	483b      	ldr	r0, [pc, #236]	@ (8002234 <HAL_TIM_MspPostInit+0x148>)
 8002148:	f000 fa66 	bl	8002618 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800214c:	e06b      	b.n	8002226 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a39      	ldr	r2, [pc, #228]	@ (8002238 <HAL_TIM_MspPostInit+0x14c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d11e      	bne.n	8002196 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	4b34      	ldr	r3, [pc, #208]	@ (8002230 <HAL_TIM_MspPostInit+0x144>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	4a33      	ldr	r2, [pc, #204]	@ (8002230 <HAL_TIM_MspPostInit+0x144>)
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	6313      	str	r3, [r2, #48]	@ 0x30
 8002168:	4b31      	ldr	r3, [pc, #196]	@ (8002230 <HAL_TIM_MspPostInit+0x144>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002174:	2303      	movs	r3, #3
 8002176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002184:	2302      	movs	r3, #2
 8002186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4619      	mov	r1, r3
 800218e:	4829      	ldr	r0, [pc, #164]	@ (8002234 <HAL_TIM_MspPostInit+0x148>)
 8002190:	f000 fa42 	bl	8002618 <HAL_GPIO_Init>
}
 8002194:	e047      	b.n	8002226 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM5)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a28      	ldr	r2, [pc, #160]	@ (800223c <HAL_TIM_MspPostInit+0x150>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d11e      	bne.n	80021de <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	4b22      	ldr	r3, [pc, #136]	@ (8002230 <HAL_TIM_MspPostInit+0x144>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a8:	4a21      	ldr	r2, [pc, #132]	@ (8002230 <HAL_TIM_MspPostInit+0x144>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002230 <HAL_TIM_MspPostInit+0x144>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021bc:	230c      	movs	r3, #12
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021cc:	2302      	movs	r3, #2
 80021ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	4619      	mov	r1, r3
 80021d6:	481a      	ldr	r0, [pc, #104]	@ (8002240 <HAL_TIM_MspPostInit+0x154>)
 80021d8:	f000 fa1e 	bl	8002618 <HAL_GPIO_Init>
}
 80021dc:	e023      	b.n	8002226 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM12)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a18      	ldr	r2, [pc, #96]	@ (8002244 <HAL_TIM_MspPostInit+0x158>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d11e      	bne.n	8002226 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <HAL_TIM_MspPostInit+0x144>)
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002230 <HAL_TIM_MspPostInit+0x144>)
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <HAL_TIM_MspPostInit+0x144>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002204:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002212:	2300      	movs	r3, #0
 8002214:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002216:	2309      	movs	r3, #9
 8002218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	f107 031c 	add.w	r3, r7, #28
 800221e:	4619      	mov	r1, r3
 8002220:	4804      	ldr	r0, [pc, #16]	@ (8002234 <HAL_TIM_MspPostInit+0x148>)
 8002222:	f000 f9f9 	bl	8002618 <HAL_GPIO_Init>
}
 8002226:	bf00      	nop
 8002228:	3730      	adds	r7, #48	@ 0x30
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	40020400 	.word	0x40020400
 8002238:	40000400 	.word	0x40000400
 800223c:	40000c00 	.word	0x40000c00
 8002240:	40020000 	.word	0x40020000
 8002244:	40001800 	.word	0x40001800

08002248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <NMI_Handler+0x4>

08002250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <HardFault_Handler+0x4>

08002258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <MemManage_Handler+0x4>

08002260 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <BusFault_Handler+0x4>

08002268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <UsageFault_Handler+0x4>

08002270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800229e:	f000 f891 	bl	80023c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <SystemInit+0x20>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <SystemInit+0x20>)
 80022b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002304 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022d0:	f7ff ffea 	bl	80022a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d4:	480c      	ldr	r0, [pc, #48]	@ (8002308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022d6:	490d      	ldr	r1, [pc, #52]	@ (800230c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022dc:	e002      	b.n	80022e4 <LoopCopyDataInit>

080022de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e2:	3304      	adds	r3, #4

080022e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e8:	d3f9      	bcc.n	80022de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f0:	e001      	b.n	80022f6 <LoopFillZerobss>

080022f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f4:	3204      	adds	r2, #4

080022f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f8:	d3fb      	bcc.n	80022f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022fa:	f002 f8e3 	bl	80044c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022fe:	f7fe fdbd 	bl	8000e7c <main>
  bx  lr    
 8002302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800230c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002310:	080045e0 	.word	0x080045e0
  ldr r2, =_sbss
 8002314:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002318:	20000224 	.word	0x20000224

0800231c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC_IRQHandler>
	...

08002320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002324:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_Init+0x40>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0d      	ldr	r2, [pc, #52]	@ (8002360 <HAL_Init+0x40>)
 800232a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800232e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <HAL_Init+0x40>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	@ (8002360 <HAL_Init+0x40>)
 8002336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800233a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a07      	ldr	r2, [pc, #28]	@ (8002360 <HAL_Init+0x40>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002348:	2003      	movs	r0, #3
 800234a:	f000 f931 	bl	80025b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234e:	200f      	movs	r0, #15
 8002350:	f000 f808 	bl	8002364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002354:	f7ff fd72 	bl	8001e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023c00 	.word	0x40023c00

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HAL_InitTick+0x54>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <HAL_InitTick+0x58>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4619      	mov	r1, r3
 8002376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800237a:	fbb3 f3f1 	udiv	r3, r3, r1
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f93b 	bl	80025fe <HAL_SYSTICK_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e00e      	b.n	80023b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b0f      	cmp	r3, #15
 8002396:	d80a      	bhi.n	80023ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002398:	2200      	movs	r2, #0
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023a0:	f000 f911 	bl	80025c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a4:	4a06      	ldr	r2, [pc, #24]	@ (80023c0 <HAL_InitTick+0x5c>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000008 	.word	0x20000008
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_IncTick+0x20>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_IncTick+0x24>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	4a04      	ldr	r2, [pc, #16]	@ (80023e8 <HAL_IncTick+0x24>)
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000008 	.word	0x20000008
 80023e8:	20000220 	.word	0x20000220

080023ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return uwTick;
 80023f0:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <HAL_GetTick+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000220 	.word	0x20000220

08002404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800240c:	f7ff ffee 	bl	80023ec <HAL_GetTick>
 8002410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800241c:	d005      	beq.n	800242a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800241e:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <HAL_Delay+0x44>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800242a:	bf00      	nop
 800242c:	f7ff ffde 	bl	80023ec <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	429a      	cmp	r2, r3
 800243a:	d8f7      	bhi.n	800242c <HAL_Delay+0x28>
  {
  }
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000008 	.word	0x20000008

0800244c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800245c:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002468:	4013      	ands	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002474:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800247c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247e:	4a04      	ldr	r2, [pc, #16]	@ (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	60d3      	str	r3, [r2, #12]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002498:	4b04      	ldr	r3, [pc, #16]	@ (80024ac <__NVIC_GetPriorityGrouping+0x18>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	f003 0307 	and.w	r3, r3, #7
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	@ (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	@ (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	@ 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	@ 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800257c:	d301      	bcc.n	8002582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257e:	2301      	movs	r3, #1
 8002580:	e00f      	b.n	80025a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002582:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <SysTick_Config+0x40>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258a:	210f      	movs	r1, #15
 800258c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002590:	f7ff ff8e 	bl	80024b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <SysTick_Config+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259a:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <SysTick_Config+0x40>)
 800259c:	2207      	movs	r2, #7
 800259e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000e010 	.word	0xe000e010

080025b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff47 	bl	800244c <__NVIC_SetPriorityGrouping>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d8:	f7ff ff5c 	bl	8002494 <__NVIC_GetPriorityGrouping>
 80025dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	f7ff ff8e 	bl	8002504 <NVIC_EncodePriority>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff5d 	bl	80024b0 <__NVIC_SetPriority>
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffb0 	bl	800256c <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e165      	b.n	8002900 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002634:	2201      	movs	r2, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	429a      	cmp	r2, r3
 800264e:	f040 8154 	bne.w	80028fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d005      	beq.n	800266a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002666:	2b02      	cmp	r3, #2
 8002668:	d130      	bne.n	80026cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 0201 	and.w	r2, r3, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d017      	beq.n	8002708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d123      	bne.n	800275c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	220f      	movs	r2, #15
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	08da      	lsrs	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3208      	adds	r2, #8
 8002756:	69b9      	ldr	r1, [r7, #24]
 8002758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0203 	and.w	r2, r3, #3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80ae 	beq.w	80028fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002918 <HAL_GPIO_Init+0x300>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002918 <HAL_GPIO_Init+0x300>)
 80027a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002918 <HAL_GPIO_Init+0x300>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ba:	4a58      	ldr	r2, [pc, #352]	@ (800291c <HAL_GPIO_Init+0x304>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002920 <HAL_GPIO_Init+0x308>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d025      	beq.n	8002832 <HAL_GPIO_Init+0x21a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002924 <HAL_GPIO_Init+0x30c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01f      	beq.n	800282e <HAL_GPIO_Init+0x216>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002928 <HAL_GPIO_Init+0x310>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d019      	beq.n	800282a <HAL_GPIO_Init+0x212>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4c      	ldr	r2, [pc, #304]	@ (800292c <HAL_GPIO_Init+0x314>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0x20e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4b      	ldr	r2, [pc, #300]	@ (8002930 <HAL_GPIO_Init+0x318>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00d      	beq.n	8002822 <HAL_GPIO_Init+0x20a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4a      	ldr	r2, [pc, #296]	@ (8002934 <HAL_GPIO_Init+0x31c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <HAL_GPIO_Init+0x206>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a49      	ldr	r2, [pc, #292]	@ (8002938 <HAL_GPIO_Init+0x320>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_GPIO_Init+0x202>
 8002816:	2306      	movs	r3, #6
 8002818:	e00c      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 800281a:	2307      	movs	r3, #7
 800281c:	e00a      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 800281e:	2305      	movs	r3, #5
 8002820:	e008      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 8002822:	2304      	movs	r3, #4
 8002824:	e006      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 8002826:	2303      	movs	r3, #3
 8002828:	e004      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 800282a:	2302      	movs	r3, #2
 800282c:	e002      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 8002832:	2300      	movs	r3, #0
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	f002 0203 	and.w	r2, r2, #3
 800283a:	0092      	lsls	r2, r2, #2
 800283c:	4093      	lsls	r3, r2
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002844:	4935      	ldr	r1, [pc, #212]	@ (800291c <HAL_GPIO_Init+0x304>)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	3302      	adds	r3, #2
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002852:	4b3a      	ldr	r3, [pc, #232]	@ (800293c <HAL_GPIO_Init+0x324>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002876:	4a31      	ldr	r2, [pc, #196]	@ (800293c <HAL_GPIO_Init+0x324>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800287c:	4b2f      	ldr	r3, [pc, #188]	@ (800293c <HAL_GPIO_Init+0x324>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a0:	4a26      	ldr	r2, [pc, #152]	@ (800293c <HAL_GPIO_Init+0x324>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028a6:	4b25      	ldr	r3, [pc, #148]	@ (800293c <HAL_GPIO_Init+0x324>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ca:	4a1c      	ldr	r2, [pc, #112]	@ (800293c <HAL_GPIO_Init+0x324>)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d0:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <HAL_GPIO_Init+0x324>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f4:	4a11      	ldr	r2, [pc, #68]	@ (800293c <HAL_GPIO_Init+0x324>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3301      	adds	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b0f      	cmp	r3, #15
 8002904:	f67f ae96 	bls.w	8002634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3724      	adds	r7, #36	@ 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	40013800 	.word	0x40013800
 8002920:	40020000 	.word	0x40020000
 8002924:	40020400 	.word	0x40020400
 8002928:	40020800 	.word	0x40020800
 800292c:	40020c00 	.word	0x40020c00
 8002930:	40021000 	.word	0x40021000
 8002934:	40021400 	.word	0x40021400
 8002938:	40021800 	.word	0x40021800
 800293c:	40013c00 	.word	0x40013c00

08002940 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	4b20      	ldr	r3, [pc, #128]	@ (80029d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	4a1f      	ldr	r2, [pc, #124]	@ (80029d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002958:	6413      	str	r3, [r2, #64]	@ 0x40
 800295a:	4b1d      	ldr	r3, [pc, #116]	@ (80029d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002966:	4b1b      	ldr	r3, [pc, #108]	@ (80029d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800296c:	f7ff fd3e 	bl	80023ec <HAL_GetTick>
 8002970:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002972:	e009      	b.n	8002988 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002974:	f7ff fd3a 	bl	80023ec <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002982:	d901      	bls.n	8002988 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e01f      	b.n	80029c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002988:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002994:	d1ee      	bne.n	8002974 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002996:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800299c:	f7ff fd26 	bl	80023ec <HAL_GetTick>
 80029a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029a2:	e009      	b.n	80029b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029a4:	f7ff fd22 	bl	80023ec <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029b2:	d901      	bls.n	80029b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e007      	b.n	80029c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029b8:	4b07      	ldr	r3, [pc, #28]	@ (80029d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029c4:	d1ee      	bne.n	80029a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	420e0040 	.word	0x420e0040
 80029d8:	40007000 	.word	0x40007000
 80029dc:	420e0044 	.word	0x420e0044

080029e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0cc      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b68      	ldr	r3, [pc, #416]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d90c      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b65      	ldr	r3, [pc, #404]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b63      	ldr	r3, [pc, #396]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b8      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a34:	4b59      	ldr	r3, [pc, #356]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a58      	ldr	r2, [pc, #352]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a4c:	4b53      	ldr	r3, [pc, #332]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a52      	ldr	r2, [pc, #328]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b50      	ldr	r3, [pc, #320]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	494d      	ldr	r1, [pc, #308]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d044      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b47      	ldr	r3, [pc, #284]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d119      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e06f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	4b3b      	ldr	r3, [pc, #236]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e067      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b37      	ldr	r3, [pc, #220]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4934      	ldr	r1, [pc, #208]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad0:	f7ff fc8c 	bl	80023ec <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7ff fc88 	bl	80023ec <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e04f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b2b      	ldr	r3, [pc, #172]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d20c      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b22      	ldr	r3, [pc, #136]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b20      	ldr	r3, [pc, #128]	@ (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e032      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4916      	ldr	r1, [pc, #88]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	490e      	ldr	r1, [pc, #56]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b66:	f000 f821 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	490a      	ldr	r1, [pc, #40]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b78:	5ccb      	ldrb	r3, [r1, r3]
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fbec 	bl	8002364 <HAL_InitTick>

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023c00 	.word	0x40023c00
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	080045c0 	.word	0x080045c0
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	20000004 	.word	0x20000004

08002bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb0:	b0ae      	sub	sp, #184	@ 0xb8
 8002bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd2:	4bcb      	ldr	r3, [pc, #812]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	f200 8206 	bhi.w	8002fec <HAL_RCC_GetSysClockFreq+0x440>
 8002be0:	a201      	add	r2, pc, #4	@ (adr r2, 8002be8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002c1d 	.word	0x08002c1d
 8002bec:	08002fed 	.word	0x08002fed
 8002bf0:	08002fed 	.word	0x08002fed
 8002bf4:	08002fed 	.word	0x08002fed
 8002bf8:	08002c25 	.word	0x08002c25
 8002bfc:	08002fed 	.word	0x08002fed
 8002c00:	08002fed 	.word	0x08002fed
 8002c04:	08002fed 	.word	0x08002fed
 8002c08:	08002c2d 	.word	0x08002c2d
 8002c0c:	08002fed 	.word	0x08002fed
 8002c10:	08002fed 	.word	0x08002fed
 8002c14:	08002fed 	.word	0x08002fed
 8002c18:	08002e1d 	.word	0x08002e1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4bb9      	ldr	r3, [pc, #740]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c22:	e1e7      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c24:	4bb8      	ldr	r3, [pc, #736]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c2a:	e1e3      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c2c:	4bb4      	ldr	r3, [pc, #720]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c38:	4bb1      	ldr	r3, [pc, #708]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d071      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c44:	4bae      	ldr	r3, [pc, #696]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c50:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c6a:	4622      	mov	r2, r4
 8002c6c:	462b      	mov	r3, r5
 8002c6e:	f04f 0000 	mov.w	r0, #0
 8002c72:	f04f 0100 	mov.w	r1, #0
 8002c76:	0159      	lsls	r1, r3, #5
 8002c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7c:	0150      	lsls	r0, r2, #5
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4621      	mov	r1, r4
 8002c84:	1a51      	subs	r1, r2, r1
 8002c86:	6439      	str	r1, [r7, #64]	@ 0x40
 8002c88:	4629      	mov	r1, r5
 8002c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c9c:	4649      	mov	r1, r9
 8002c9e:	018b      	lsls	r3, r1, #6
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ca6:	4641      	mov	r1, r8
 8002ca8:	018a      	lsls	r2, r1, #6
 8002caa:	4641      	mov	r1, r8
 8002cac:	1a51      	subs	r1, r2, r1
 8002cae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cb0:	4649      	mov	r1, r9
 8002cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	00cb      	lsls	r3, r1, #3
 8002cc8:	4641      	mov	r1, r8
 8002cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cce:	4641      	mov	r1, r8
 8002cd0:	00ca      	lsls	r2, r1, #3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4622      	mov	r2, r4
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cde:	462b      	mov	r3, r5
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	eb42 0303 	adc.w	r3, r2, r3
 8002ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	024b      	lsls	r3, r1, #9
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cfe:	4621      	mov	r1, r4
 8002d00:	024a      	lsls	r2, r1, #9
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002d18:	f7fd ff1a 	bl	8000b50 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d26:	e067      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d28:	4b75      	ldr	r3, [pc, #468]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d34:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d42:	2300      	movs	r3, #0
 8002d44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	0159      	lsls	r1, r3, #5
 8002d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5c:	0150      	lsls	r0, r2, #5
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4621      	mov	r1, r4
 8002d64:	1a51      	subs	r1, r2, r1
 8002d66:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002d68:	4629      	mov	r1, r5
 8002d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	018b      	lsls	r3, r1, #6
 8002d80:	4641      	mov	r1, r8
 8002d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d86:	4641      	mov	r1, r8
 8002d88:	018a      	lsls	r2, r1, #6
 8002d8a:	4641      	mov	r1, r8
 8002d8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d90:	4649      	mov	r1, r9
 8002d92:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002da2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002da6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002daa:	4692      	mov	sl, r2
 8002dac:	469b      	mov	fp, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	eb1a 0303 	adds.w	r3, sl, r3
 8002db4:	623b      	str	r3, [r7, #32]
 8002db6:	462b      	mov	r3, r5
 8002db8:	eb4b 0303 	adc.w	r3, fp, r3
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	028b      	lsls	r3, r1, #10
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	028a      	lsls	r2, r1, #10
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002de0:	2200      	movs	r2, #0
 8002de2:	673b      	str	r3, [r7, #112]	@ 0x70
 8002de4:	677a      	str	r2, [r7, #116]	@ 0x74
 8002de6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002dea:	f7fd feb1 	bl	8000b50 <__aeabi_uldivmod>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4613      	mov	r3, r2
 8002df4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002df8:	4b41      	ldr	r3, [pc, #260]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	3301      	adds	r3, #1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e1a:	e0eb      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e1c:	4b38      	ldr	r3, [pc, #224]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e28:	4b35      	ldr	r3, [pc, #212]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d06b      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e34:	4b32      	ldr	r3, [pc, #200]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	099b      	lsrs	r3, r3, #6
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e46:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e48:	2300      	movs	r3, #0
 8002e4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002e50:	4622      	mov	r2, r4
 8002e52:	462b      	mov	r3, r5
 8002e54:	f04f 0000 	mov.w	r0, #0
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	0159      	lsls	r1, r3, #5
 8002e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e62:	0150      	lsls	r0, r2, #5
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4621      	mov	r1, r4
 8002e6a:	1a51      	subs	r1, r2, r1
 8002e6c:	61b9      	str	r1, [r7, #24]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	eb63 0301 	sbc.w	r3, r3, r1
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e82:	4659      	mov	r1, fp
 8002e84:	018b      	lsls	r3, r1, #6
 8002e86:	4651      	mov	r1, sl
 8002e88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e8c:	4651      	mov	r1, sl
 8002e8e:	018a      	lsls	r2, r1, #6
 8002e90:	4651      	mov	r1, sl
 8002e92:	ebb2 0801 	subs.w	r8, r2, r1
 8002e96:	4659      	mov	r1, fp
 8002e98:	eb63 0901 	sbc.w	r9, r3, r1
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ea8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eb0:	4690      	mov	r8, r2
 8002eb2:	4699      	mov	r9, r3
 8002eb4:	4623      	mov	r3, r4
 8002eb6:	eb18 0303 	adds.w	r3, r8, r3
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	462b      	mov	r3, r5
 8002ebe:	eb49 0303 	adc.w	r3, r9, r3
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	024b      	lsls	r3, r1, #9
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eda:	4621      	mov	r1, r4
 8002edc:	024a      	lsls	r2, r1, #9
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002eea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002eec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ef0:	f7fd fe2e 	bl	8000b50 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4613      	mov	r3, r2
 8002efa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002efe:	e065      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x420>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	00f42400 	.word	0x00f42400
 8002f08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	2200      	movs	r2, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	4611      	mov	r1, r2
 8002f18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f1e:	2300      	movs	r3, #0
 8002f20:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002f26:	4642      	mov	r2, r8
 8002f28:	464b      	mov	r3, r9
 8002f2a:	f04f 0000 	mov.w	r0, #0
 8002f2e:	f04f 0100 	mov.w	r1, #0
 8002f32:	0159      	lsls	r1, r3, #5
 8002f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f38:	0150      	lsls	r0, r2, #5
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4641      	mov	r1, r8
 8002f40:	1a51      	subs	r1, r2, r1
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	4649      	mov	r1, r9
 8002f46:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f58:	4659      	mov	r1, fp
 8002f5a:	018b      	lsls	r3, r1, #6
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f62:	4651      	mov	r1, sl
 8002f64:	018a      	lsls	r2, r1, #6
 8002f66:	4651      	mov	r1, sl
 8002f68:	1a54      	subs	r4, r2, r1
 8002f6a:	4659      	mov	r1, fp
 8002f6c:	eb63 0501 	sbc.w	r5, r3, r1
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	00eb      	lsls	r3, r5, #3
 8002f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f7e:	00e2      	lsls	r2, r4, #3
 8002f80:	4614      	mov	r4, r2
 8002f82:	461d      	mov	r5, r3
 8002f84:	4643      	mov	r3, r8
 8002f86:	18e3      	adds	r3, r4, r3
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	eb45 0303 	adc.w	r3, r5, r3
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	028b      	lsls	r3, r1, #10
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fa8:	4621      	mov	r1, r4
 8002faa:	028a      	lsls	r2, r1, #10
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fb8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002fba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fbe:	f7fd fdc7 	bl	8000b50 <__aeabi_uldivmod>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0f1b      	lsrs	r3, r3, #28
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002fda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fea:	e003      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fec:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ff2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	37b8      	adds	r7, #184	@ 0xb8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800
 8003008:	00f42400 	.word	0x00f42400

0800300c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e28d      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8083 	beq.w	8003132 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800302c:	4b94      	ldr	r3, [pc, #592]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b04      	cmp	r3, #4
 8003036:	d019      	beq.n	800306c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003038:	4b91      	ldr	r3, [pc, #580]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003040:	2b08      	cmp	r3, #8
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003044:	4b8e      	ldr	r3, [pc, #568]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003050:	d00c      	beq.n	800306c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003052:	4b8b      	ldr	r3, [pc, #556]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800305a:	2b0c      	cmp	r3, #12
 800305c:	d112      	bne.n	8003084 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305e:	4b88      	ldr	r3, [pc, #544]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003066:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800306a:	d10b      	bne.n	8003084 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	4b84      	ldr	r3, [pc, #528]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d05b      	beq.n	8003130 <HAL_RCC_OscConfig+0x124>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d157      	bne.n	8003130 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e25a      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800308c:	d106      	bne.n	800309c <HAL_RCC_OscConfig+0x90>
 800308e:	4b7c      	ldr	r3, [pc, #496]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a7b      	ldr	r2, [pc, #492]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e01d      	b.n	80030d8 <HAL_RCC_OscConfig+0xcc>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0xb4>
 80030a6:	4b76      	ldr	r3, [pc, #472]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a75      	ldr	r2, [pc, #468]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b73      	ldr	r3, [pc, #460]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a72      	ldr	r2, [pc, #456]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e00b      	b.n	80030d8 <HAL_RCC_OscConfig+0xcc>
 80030c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7ff f984 	bl	80023ec <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7ff f980 	bl	80023ec <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	@ 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e21f      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b61      	ldr	r3, [pc, #388]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0xdc>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7ff f970 	bl	80023ec <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7ff f96c 	bl	80023ec <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	@ 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e20b      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003122:	4b57      	ldr	r3, [pc, #348]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x104>
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d06f      	beq.n	800321e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800313e:	4b50      	ldr	r3, [pc, #320]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b00      	cmp	r3, #0
 8003148:	d017      	beq.n	800317a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800314a:	4b4d      	ldr	r3, [pc, #308]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003152:	2b08      	cmp	r3, #8
 8003154:	d105      	bne.n	8003162 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003156:	4b4a      	ldr	r3, [pc, #296]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003162:	4b47      	ldr	r3, [pc, #284]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800316a:	2b0c      	cmp	r3, #12
 800316c:	d11c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b44      	ldr	r3, [pc, #272]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d116      	bne.n	80031a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	4b41      	ldr	r3, [pc, #260]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x186>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d001      	beq.n	8003192 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e1d3      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b3b      	ldr	r3, [pc, #236]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4937      	ldr	r1, [pc, #220]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	e03a      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d020      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b0:	4b34      	ldr	r3, [pc, #208]	@ (8003284 <HAL_RCC_OscConfig+0x278>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7ff f919 	bl	80023ec <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031be:	f7ff f915 	bl	80023ec <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1b4      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b28      	ldr	r3, [pc, #160]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4925      	ldr	r1, [pc, #148]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f2:	4b24      	ldr	r3, [pc, #144]	@ (8003284 <HAL_RCC_OscConfig+0x278>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7ff f8f8 	bl	80023ec <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003200:	f7ff f8f4 	bl	80023ec <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e193      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	4b1b      	ldr	r3, [pc, #108]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d036      	beq.n	8003298 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003232:	4b15      	ldr	r3, [pc, #84]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7ff f8d8 	bl	80023ec <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003240:	f7ff f8d4 	bl	80023ec <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e173      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003252:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x234>
 800325e:	e01b      	b.n	8003298 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003260:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7ff f8c1 	bl	80023ec <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	e00e      	b.n	800328c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326e:	f7ff f8bd 	bl	80023ec <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d907      	bls.n	800328c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e15c      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
 8003280:	40023800 	.word	0x40023800
 8003284:	42470000 	.word	0x42470000
 8003288:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b8a      	ldr	r3, [pc, #552]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800328e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ea      	bne.n	800326e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8097 	beq.w	80033d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b83      	ldr	r3, [pc, #524]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	4b7f      	ldr	r3, [pc, #508]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	4a7e      	ldr	r2, [pc, #504]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c6:	4b7c      	ldr	r3, [pc, #496]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b79      	ldr	r3, [pc, #484]	@ (80034bc <HAL_RCC_OscConfig+0x4b0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d118      	bne.n	8003314 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e2:	4b76      	ldr	r3, [pc, #472]	@ (80034bc <HAL_RCC_OscConfig+0x4b0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a75      	ldr	r2, [pc, #468]	@ (80034bc <HAL_RCC_OscConfig+0x4b0>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ee:	f7ff f87d 	bl	80023ec <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f6:	f7ff f879 	bl	80023ec <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e118      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	4b6c      	ldr	r3, [pc, #432]	@ (80034bc <HAL_RCC_OscConfig+0x4b0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x31e>
 800331c:	4b66      	ldr	r3, [pc, #408]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003320:	4a65      	ldr	r2, [pc, #404]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	@ 0x70
 8003328:	e01c      	b.n	8003364 <HAL_RCC_OscConfig+0x358>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x340>
 8003332:	4b61      	ldr	r3, [pc, #388]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003336:	4a60      	ldr	r2, [pc, #384]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	6713      	str	r3, [r2, #112]	@ 0x70
 800333e:	4b5e      	ldr	r3, [pc, #376]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003342:	4a5d      	ldr	r2, [pc, #372]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6713      	str	r3, [r2, #112]	@ 0x70
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0x358>
 800334c:	4b5a      	ldr	r3, [pc, #360]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003350:	4a59      	ldr	r2, [pc, #356]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	@ 0x70
 8003358:	4b57      	ldr	r3, [pc, #348]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335c:	4a56      	ldr	r2, [pc, #344]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800335e:	f023 0304 	bic.w	r3, r3, #4
 8003362:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d015      	beq.n	8003398 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7ff f83e 	bl	80023ec <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	e00a      	b.n	800338a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003374:	f7ff f83a 	bl	80023ec <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e0d7      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	4b4b      	ldr	r3, [pc, #300]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0ee      	beq.n	8003374 <HAL_RCC_OscConfig+0x368>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7ff f828 	bl	80023ec <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7ff f824 	bl	80023ec <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0c1      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b6:	4b40      	ldr	r3, [pc, #256]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ee      	bne.n	80033a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4b3b      	ldr	r3, [pc, #236]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	4a3a      	ldr	r2, [pc, #232]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80ad 	beq.w	8003538 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033de:	4b36      	ldr	r3, [pc, #216]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d060      	beq.n	80034ac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d145      	bne.n	800347e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b33      	ldr	r3, [pc, #204]	@ (80034c0 <HAL_RCC_OscConfig+0x4b4>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe fff8 	bl	80023ec <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fff4 	bl	80023ec <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e093      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b29      	ldr	r3, [pc, #164]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	071b      	lsls	r3, r3, #28
 800344a:	491b      	ldr	r1, [pc, #108]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003450:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_RCC_OscConfig+0x4b4>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fe ffc9 	bl	80023ec <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345e:	f7fe ffc5 	bl	80023ec <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e064      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x452>
 800347c:	e05c      	b.n	8003538 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <HAL_RCC_OscConfig+0x4b4>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fe ffb2 	bl	80023ec <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe ffae 	bl	80023ec <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e04d      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_RCC_OscConfig+0x4ac>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x480>
 80034aa:	e045      	b.n	8003538 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d107      	bne.n	80034c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e040      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40007000 	.word	0x40007000
 80034c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003544 <HAL_RCC_OscConfig+0x538>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d030      	beq.n	8003534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d129      	bne.n	8003534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d122      	bne.n	8003534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034f4:	4013      	ands	r3, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d119      	bne.n	8003534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	3b01      	subs	r3, #1
 800350e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d10f      	bne.n	8003534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d107      	bne.n	8003534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800

08003548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e041      	b.n	80035de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fe fd9a 	bl	80020a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f000 fc02 	bl	8003d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e041      	b.n	800367c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7fe fc3d 	bl	8001e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2202      	movs	r2, #2
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3304      	adds	r3, #4
 8003622:	4619      	mov	r1, r3
 8003624:	4610      	mov	r0, r2
 8003626:	f000 fbb3 	bl	8003d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <HAL_TIM_PWM_Start+0x24>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e022      	b.n	80036ee <HAL_TIM_PWM_Start+0x6a>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d109      	bne.n	80036c2 <HAL_TIM_PWM_Start+0x3e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	bf14      	ite	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	2300      	moveq	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	e015      	b.n	80036ee <HAL_TIM_PWM_Start+0x6a>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d109      	bne.n	80036dc <HAL_TIM_PWM_Start+0x58>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	bf14      	ite	ne
 80036d4:	2301      	movne	r3, #1
 80036d6:	2300      	moveq	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	e008      	b.n	80036ee <HAL_TIM_PWM_Start+0x6a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e07c      	b.n	80037f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Start+0x82>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003704:	e013      	b.n	800372e <HAL_TIM_PWM_Start+0xaa>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0x92>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003714:	e00b      	b.n	800372e <HAL_TIM_PWM_Start+0xaa>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d104      	bne.n	8003726 <HAL_TIM_PWM_Start+0xa2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003724:	e003      	b.n	800372e <HAL_TIM_PWM_Start+0xaa>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2201      	movs	r2, #1
 8003734:	6839      	ldr	r1, [r7, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fe1a 	bl	8004370 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2d      	ldr	r2, [pc, #180]	@ (80037f8 <HAL_TIM_PWM_Start+0x174>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d004      	beq.n	8003750 <HAL_TIM_PWM_Start+0xcc>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2c      	ldr	r2, [pc, #176]	@ (80037fc <HAL_TIM_PWM_Start+0x178>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_TIM_PWM_Start+0xd0>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <HAL_TIM_PWM_Start+0xd2>
 8003754:	2300      	movs	r3, #0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003768:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a22      	ldr	r2, [pc, #136]	@ (80037f8 <HAL_TIM_PWM_Start+0x174>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d022      	beq.n	80037ba <HAL_TIM_PWM_Start+0x136>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377c:	d01d      	beq.n	80037ba <HAL_TIM_PWM_Start+0x136>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1f      	ldr	r2, [pc, #124]	@ (8003800 <HAL_TIM_PWM_Start+0x17c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d018      	beq.n	80037ba <HAL_TIM_PWM_Start+0x136>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <HAL_TIM_PWM_Start+0x180>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <HAL_TIM_PWM_Start+0x136>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1c      	ldr	r2, [pc, #112]	@ (8003808 <HAL_TIM_PWM_Start+0x184>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00e      	beq.n	80037ba <HAL_TIM_PWM_Start+0x136>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a16      	ldr	r2, [pc, #88]	@ (80037fc <HAL_TIM_PWM_Start+0x178>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d009      	beq.n	80037ba <HAL_TIM_PWM_Start+0x136>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a18      	ldr	r2, [pc, #96]	@ (800380c <HAL_TIM_PWM_Start+0x188>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_TIM_PWM_Start+0x136>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a16      	ldr	r2, [pc, #88]	@ (8003810 <HAL_TIM_PWM_Start+0x18c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d111      	bne.n	80037de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b06      	cmp	r3, #6
 80037ca:	d010      	beq.n	80037ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037dc:	e007      	b.n	80037ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40010000 	.word	0x40010000
 80037fc:	40010400 	.word	0x40010400
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800
 8003808:	40000c00 	.word	0x40000c00
 800380c:	40014000 	.word	0x40014000
 8003810:	40001800 	.word	0x40001800

08003814 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e097      	b.n	8003958 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d106      	bne.n	8003842 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7fe fbb5 	bl	8001fac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003858:	f023 0307 	bic.w	r3, r3, #7
 800385c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3304      	adds	r3, #4
 8003866:	4619      	mov	r1, r3
 8003868:	4610      	mov	r0, r2
 800386a:	f000 fa91 	bl	8003d90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	4313      	orrs	r3, r2
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80038b4:	f023 030c 	bic.w	r3, r3, #12
 80038b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	4313      	orrs	r3, r2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	011a      	lsls	r2, r3, #4
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	031b      	lsls	r3, r3, #12
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80038f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	4313      	orrs	r3, r2
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003970:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003978:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003980:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003988:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d110      	bne.n	80039b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d102      	bne.n	800399c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003996:	7b7b      	ldrb	r3, [r7, #13]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d001      	beq.n	80039a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e069      	b.n	8003a74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039b0:	e031      	b.n	8003a16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d110      	bne.n	80039da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039b8:	7bbb      	ldrb	r3, [r7, #14]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d102      	bne.n	80039c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039be:	7b3b      	ldrb	r3, [r7, #12]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d001      	beq.n	80039c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e055      	b.n	8003a74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039d8:	e01d      	b.n	8003a16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d108      	bne.n	80039f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039e0:	7bbb      	ldrb	r3, [r7, #14]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d105      	bne.n	80039f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039e6:	7b7b      	ldrb	r3, [r7, #13]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d102      	bne.n	80039f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039ec:	7b3b      	ldrb	r3, [r7, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d001      	beq.n	80039f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e03e      	b.n	8003a74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_TIM_Encoder_Start+0xc4>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d008      	beq.n	8003a34 <HAL_TIM_Encoder_Start+0xd4>
 8003a22:	e00f      	b.n	8003a44 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fc9f 	bl	8004370 <TIM_CCxChannelCmd>
      break;
 8003a32:	e016      	b.n	8003a62 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	2104      	movs	r1, #4
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fc97 	bl	8004370 <TIM_CCxChannelCmd>
      break;
 8003a42:	e00e      	b.n	8003a62 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fc8f 	bl	8004370 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2201      	movs	r2, #1
 8003a58:	2104      	movs	r1, #4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fc88 	bl	8004370 <TIM_CCxChannelCmd>
      break;
 8003a60:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0ae      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	f200 809f 	bhi.w	8003be8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ae5 	.word	0x08003ae5
 8003ab4:	08003be9 	.word	0x08003be9
 8003ab8:	08003be9 	.word	0x08003be9
 8003abc:	08003be9 	.word	0x08003be9
 8003ac0:	08003b25 	.word	0x08003b25
 8003ac4:	08003be9 	.word	0x08003be9
 8003ac8:	08003be9 	.word	0x08003be9
 8003acc:	08003be9 	.word	0x08003be9
 8003ad0:	08003b67 	.word	0x08003b67
 8003ad4:	08003be9 	.word	0x08003be9
 8003ad8:	08003be9 	.word	0x08003be9
 8003adc:	08003be9 	.word	0x08003be9
 8003ae0:	08003ba7 	.word	0x08003ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 f9f6 	bl	8003edc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0208 	orr.w	r2, r2, #8
 8003afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0204 	bic.w	r2, r2, #4
 8003b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6999      	ldr	r1, [r3, #24]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	619a      	str	r2, [r3, #24]
      break;
 8003b22:	e064      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fa46 	bl	8003fbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6999      	ldr	r1, [r3, #24]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	021a      	lsls	r2, r3, #8
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	619a      	str	r2, [r3, #24]
      break;
 8003b64:	e043      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fa9b 	bl	80040a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0208 	orr.w	r2, r2, #8
 8003b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0204 	bic.w	r2, r2, #4
 8003b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69d9      	ldr	r1, [r3, #28]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	61da      	str	r2, [r3, #28]
      break;
 8003ba4:	e023      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 faef 	bl	8004190 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69d9      	ldr	r1, [r3, #28]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	61da      	str	r2, [r3, #28]
      break;
 8003be6:	e002      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	75fb      	strb	r3, [r7, #23]
      break;
 8003bec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_TIM_ConfigClockSource+0x1c>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e0b4      	b.n	8003d86 <HAL_TIM_ConfigClockSource+0x186>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c54:	d03e      	beq.n	8003cd4 <HAL_TIM_ConfigClockSource+0xd4>
 8003c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c5a:	f200 8087 	bhi.w	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c62:	f000 8086 	beq.w	8003d72 <HAL_TIM_ConfigClockSource+0x172>
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c6a:	d87f      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c6c:	2b70      	cmp	r3, #112	@ 0x70
 8003c6e:	d01a      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0xa6>
 8003c70:	2b70      	cmp	r3, #112	@ 0x70
 8003c72:	d87b      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c74:	2b60      	cmp	r3, #96	@ 0x60
 8003c76:	d050      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0x11a>
 8003c78:	2b60      	cmp	r3, #96	@ 0x60
 8003c7a:	d877      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c7c:	2b50      	cmp	r3, #80	@ 0x50
 8003c7e:	d03c      	beq.n	8003cfa <HAL_TIM_ConfigClockSource+0xfa>
 8003c80:	2b50      	cmp	r3, #80	@ 0x50
 8003c82:	d873      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c84:	2b40      	cmp	r3, #64	@ 0x40
 8003c86:	d058      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0x13a>
 8003c88:	2b40      	cmp	r3, #64	@ 0x40
 8003c8a:	d86f      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c8c:	2b30      	cmp	r3, #48	@ 0x30
 8003c8e:	d064      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x15a>
 8003c90:	2b30      	cmp	r3, #48	@ 0x30
 8003c92:	d86b      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d060      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x15a>
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d867      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d05c      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d05a      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ca4:	e062      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cb6:	f000 fb3b 	bl	8004330 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	609a      	str	r2, [r3, #8]
      break;
 8003cd2:	e04f      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ce4:	f000 fb24 	bl	8004330 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cf6:	609a      	str	r2, [r3, #8]
      break;
 8003cf8:	e03c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d06:	461a      	mov	r2, r3
 8003d08:	f000 fa98 	bl	800423c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2150      	movs	r1, #80	@ 0x50
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 faf1 	bl	80042fa <TIM_ITRx_SetConfig>
      break;
 8003d18:	e02c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d26:	461a      	mov	r2, r3
 8003d28:	f000 fab7 	bl	800429a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2160      	movs	r1, #96	@ 0x60
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fae1 	bl	80042fa <TIM_ITRx_SetConfig>
      break;
 8003d38:	e01c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	461a      	mov	r2, r3
 8003d48:	f000 fa78 	bl	800423c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2140      	movs	r1, #64	@ 0x40
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fad1 	bl	80042fa <TIM_ITRx_SetConfig>
      break;
 8003d58:	e00c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f000 fac8 	bl	80042fa <TIM_ITRx_SetConfig>
      break;
 8003d6a:	e003      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d70:	e000      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a43      	ldr	r2, [pc, #268]	@ (8003eb0 <TIM_Base_SetConfig+0x120>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d013      	beq.n	8003dd0 <TIM_Base_SetConfig+0x40>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dae:	d00f      	beq.n	8003dd0 <TIM_Base_SetConfig+0x40>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a40      	ldr	r2, [pc, #256]	@ (8003eb4 <TIM_Base_SetConfig+0x124>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00b      	beq.n	8003dd0 <TIM_Base_SetConfig+0x40>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb8 <TIM_Base_SetConfig+0x128>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <TIM_Base_SetConfig+0x40>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a3e      	ldr	r2, [pc, #248]	@ (8003ebc <TIM_Base_SetConfig+0x12c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_Base_SetConfig+0x40>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a3d      	ldr	r2, [pc, #244]	@ (8003ec0 <TIM_Base_SetConfig+0x130>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d108      	bne.n	8003de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a32      	ldr	r2, [pc, #200]	@ (8003eb0 <TIM_Base_SetConfig+0x120>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d02b      	beq.n	8003e42 <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df0:	d027      	beq.n	8003e42 <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a2f      	ldr	r2, [pc, #188]	@ (8003eb4 <TIM_Base_SetConfig+0x124>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d023      	beq.n	8003e42 <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8003eb8 <TIM_Base_SetConfig+0x128>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01f      	beq.n	8003e42 <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a2d      	ldr	r2, [pc, #180]	@ (8003ebc <TIM_Base_SetConfig+0x12c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01b      	beq.n	8003e42 <TIM_Base_SetConfig+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ec0 <TIM_Base_SetConfig+0x130>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d017      	beq.n	8003e42 <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a2b      	ldr	r2, [pc, #172]	@ (8003ec4 <TIM_Base_SetConfig+0x134>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ec8 <TIM_Base_SetConfig+0x138>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00f      	beq.n	8003e42 <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a29      	ldr	r2, [pc, #164]	@ (8003ecc <TIM_Base_SetConfig+0x13c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00b      	beq.n	8003e42 <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a28      	ldr	r2, [pc, #160]	@ (8003ed0 <TIM_Base_SetConfig+0x140>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d007      	beq.n	8003e42 <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a27      	ldr	r2, [pc, #156]	@ (8003ed4 <TIM_Base_SetConfig+0x144>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a26      	ldr	r2, [pc, #152]	@ (8003ed8 <TIM_Base_SetConfig+0x148>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d108      	bne.n	8003e54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb0 <TIM_Base_SetConfig+0x120>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d003      	beq.n	8003e82 <TIM_Base_SetConfig+0xf2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a10      	ldr	r2, [pc, #64]	@ (8003ec0 <TIM_Base_SetConfig+0x130>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d103      	bne.n	8003e8a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f043 0204 	orr.w	r2, r3, #4
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40010000 	.word	0x40010000
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800
 8003ebc:	40000c00 	.word	0x40000c00
 8003ec0:	40010400 	.word	0x40010400
 8003ec4:	40014000 	.word	0x40014000
 8003ec8:	40014400 	.word	0x40014400
 8003ecc:	40014800 	.word	0x40014800
 8003ed0:	40001800 	.word	0x40001800
 8003ed4:	40001c00 	.word	0x40001c00
 8003ed8:	40002000 	.word	0x40002000

08003edc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f023 0201 	bic.w	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f023 0302 	bic.w	r3, r3, #2
 8003f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a20      	ldr	r2, [pc, #128]	@ (8003fb4 <TIM_OC1_SetConfig+0xd8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_OC1_SetConfig+0x64>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb8 <TIM_OC1_SetConfig+0xdc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d10c      	bne.n	8003f5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f023 0308 	bic.w	r3, r3, #8
 8003f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f023 0304 	bic.w	r3, r3, #4
 8003f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a15      	ldr	r2, [pc, #84]	@ (8003fb4 <TIM_OC1_SetConfig+0xd8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_OC1_SetConfig+0x8e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a14      	ldr	r2, [pc, #80]	@ (8003fb8 <TIM_OC1_SetConfig+0xdc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d111      	bne.n	8003f8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	621a      	str	r2, [r3, #32]
}
 8003fa8:	bf00      	nop
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40010400 	.word	0x40010400

08003fbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f023 0210 	bic.w	r2, r3, #16
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0320 	bic.w	r3, r3, #32
 8004006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a22      	ldr	r2, [pc, #136]	@ (80040a0 <TIM_OC2_SetConfig+0xe4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_OC2_SetConfig+0x68>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a21      	ldr	r2, [pc, #132]	@ (80040a4 <TIM_OC2_SetConfig+0xe8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d10d      	bne.n	8004040 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800402a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800403e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a17      	ldr	r2, [pc, #92]	@ (80040a0 <TIM_OC2_SetConfig+0xe4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_OC2_SetConfig+0x94>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a16      	ldr	r2, [pc, #88]	@ (80040a4 <TIM_OC2_SetConfig+0xe8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d113      	bne.n	8004078 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800405e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40010400 	.word	0x40010400

080040a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a21      	ldr	r2, [pc, #132]	@ (8004188 <TIM_OC3_SetConfig+0xe0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_OC3_SetConfig+0x66>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a20      	ldr	r2, [pc, #128]	@ (800418c <TIM_OC3_SetConfig+0xe4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10d      	bne.n	800412a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a16      	ldr	r2, [pc, #88]	@ (8004188 <TIM_OC3_SetConfig+0xe0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <TIM_OC3_SetConfig+0x92>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a15      	ldr	r2, [pc, #84]	@ (800418c <TIM_OC3_SetConfig+0xe4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d113      	bne.n	8004162 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	621a      	str	r2, [r3, #32]
}
 800417c:	bf00      	nop
 800417e:	371c      	adds	r7, #28
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	40010000 	.word	0x40010000
 800418c:	40010400 	.word	0x40010400

08004190 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	031b      	lsls	r3, r3, #12
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a12      	ldr	r2, [pc, #72]	@ (8004234 <TIM_OC4_SetConfig+0xa4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_OC4_SetConfig+0x68>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a11      	ldr	r2, [pc, #68]	@ (8004238 <TIM_OC4_SetConfig+0xa8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d109      	bne.n	800420c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000
 8004238:	40010400 	.word	0x40010400

0800423c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f023 0201 	bic.w	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f023 030a 	bic.w	r3, r3, #10
 8004278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	621a      	str	r2, [r3, #32]
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800429a:	b480      	push	{r7}
 800429c:	b087      	sub	sp, #28
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f023 0210 	bic.w	r2, r3, #16
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	031b      	lsls	r3, r3, #12
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	f043 0307 	orr.w	r3, r3, #7
 800431c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	609a      	str	r2, [r3, #8]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800434a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	021a      	lsls	r2, r3, #8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	431a      	orrs	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4313      	orrs	r3, r2
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	609a      	str	r2, [r3, #8]
}
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2201      	movs	r2, #1
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a1a      	ldr	r2, [r3, #32]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	43db      	mvns	r3, r3
 8004392:	401a      	ands	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1a      	ldr	r2, [r3, #32]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	fa01 f303 	lsl.w	r3, r1, r3
 80043a8:	431a      	orrs	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e05a      	b.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a21      	ldr	r2, [pc, #132]	@ (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d022      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004420:	d01d      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1d      	ldr	r2, [pc, #116]	@ (800449c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d018      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1b      	ldr	r2, [pc, #108]	@ (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d013      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1a      	ldr	r2, [pc, #104]	@ (80044a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00e      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a18      	ldr	r2, [pc, #96]	@ (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d009      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a17      	ldr	r2, [pc, #92]	@ (80044ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a15      	ldr	r2, [pc, #84]	@ (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d10c      	bne.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	4313      	orrs	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40010400 	.word	0x40010400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40001800 	.word	0x40001800

080044b4 <memset>:
 80044b4:	4402      	add	r2, r0
 80044b6:	4603      	mov	r3, r0
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d100      	bne.n	80044be <memset+0xa>
 80044bc:	4770      	bx	lr
 80044be:	f803 1b01 	strb.w	r1, [r3], #1
 80044c2:	e7f9      	b.n	80044b8 <memset+0x4>

080044c4 <__libc_init_array>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	4d0d      	ldr	r5, [pc, #52]	@ (80044fc <__libc_init_array+0x38>)
 80044c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004500 <__libc_init_array+0x3c>)
 80044ca:	1b64      	subs	r4, r4, r5
 80044cc:	10a4      	asrs	r4, r4, #2
 80044ce:	2600      	movs	r6, #0
 80044d0:	42a6      	cmp	r6, r4
 80044d2:	d109      	bne.n	80044e8 <__libc_init_array+0x24>
 80044d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004504 <__libc_init_array+0x40>)
 80044d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004508 <__libc_init_array+0x44>)
 80044d8:	f000 f866 	bl	80045a8 <_init>
 80044dc:	1b64      	subs	r4, r4, r5
 80044de:	10a4      	asrs	r4, r4, #2
 80044e0:	2600      	movs	r6, #0
 80044e2:	42a6      	cmp	r6, r4
 80044e4:	d105      	bne.n	80044f2 <__libc_init_array+0x2e>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ec:	4798      	blx	r3
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7ee      	b.n	80044d0 <__libc_init_array+0xc>
 80044f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f6:	4798      	blx	r3
 80044f8:	3601      	adds	r6, #1
 80044fa:	e7f2      	b.n	80044e2 <__libc_init_array+0x1e>
 80044fc:	080045d8 	.word	0x080045d8
 8004500:	080045d8 	.word	0x080045d8
 8004504:	080045d8 	.word	0x080045d8
 8004508:	080045dc 	.word	0x080045dc

0800450c <fmin>:
 800450c:	b508      	push	{r3, lr}
 800450e:	ed2d 8b04 	vpush	{d8-d9}
 8004512:	eeb0 8a40 	vmov.f32	s16, s0
 8004516:	eef0 8a60 	vmov.f32	s17, s1
 800451a:	eeb0 9a41 	vmov.f32	s18, s2
 800451e:	eef0 9a61 	vmov.f32	s19, s3
 8004522:	f000 f81d 	bl	8004560 <__fpclassifyd>
 8004526:	b950      	cbnz	r0, 800453e <fmin+0x32>
 8004528:	eeb0 8a49 	vmov.f32	s16, s18
 800452c:	eef0 8a69 	vmov.f32	s17, s19
 8004530:	eeb0 0a48 	vmov.f32	s0, s16
 8004534:	eef0 0a68 	vmov.f32	s1, s17
 8004538:	ecbd 8b04 	vpop	{d8-d9}
 800453c:	bd08      	pop	{r3, pc}
 800453e:	eeb0 0a49 	vmov.f32	s0, s18
 8004542:	eef0 0a69 	vmov.f32	s1, s19
 8004546:	f000 f80b 	bl	8004560 <__fpclassifyd>
 800454a:	2800      	cmp	r0, #0
 800454c:	d0f0      	beq.n	8004530 <fmin+0x24>
 800454e:	ec53 2b19 	vmov	r2, r3, d9
 8004552:	ec51 0b18 	vmov	r0, r1, d8
 8004556:	f7fc fa83 	bl	8000a60 <__aeabi_dcmplt>
 800455a:	2800      	cmp	r0, #0
 800455c:	d0e4      	beq.n	8004528 <fmin+0x1c>
 800455e:	e7e7      	b.n	8004530 <fmin+0x24>

08004560 <__fpclassifyd>:
 8004560:	ec51 0b10 	vmov	r0, r1, d0
 8004564:	460b      	mov	r3, r1
 8004566:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 800456a:	b510      	push	{r4, lr}
 800456c:	d104      	bne.n	8004578 <__fpclassifyd+0x18>
 800456e:	2800      	cmp	r0, #0
 8004570:	bf0c      	ite	eq
 8004572:	2002      	moveq	r0, #2
 8004574:	2003      	movne	r0, #3
 8004576:	bd10      	pop	{r4, pc}
 8004578:	4a09      	ldr	r2, [pc, #36]	@ (80045a0 <__fpclassifyd+0x40>)
 800457a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 800457e:	4294      	cmp	r4, r2
 8004580:	d908      	bls.n	8004594 <__fpclassifyd+0x34>
 8004582:	4a08      	ldr	r2, [pc, #32]	@ (80045a4 <__fpclassifyd+0x44>)
 8004584:	4213      	tst	r3, r2
 8004586:	d007      	beq.n	8004598 <__fpclassifyd+0x38>
 8004588:	4291      	cmp	r1, r2
 800458a:	d107      	bne.n	800459c <__fpclassifyd+0x3c>
 800458c:	fab0 f080 	clz	r0, r0
 8004590:	0940      	lsrs	r0, r0, #5
 8004592:	e7f0      	b.n	8004576 <__fpclassifyd+0x16>
 8004594:	2004      	movs	r0, #4
 8004596:	e7ee      	b.n	8004576 <__fpclassifyd+0x16>
 8004598:	2003      	movs	r0, #3
 800459a:	e7ec      	b.n	8004576 <__fpclassifyd+0x16>
 800459c:	2000      	movs	r0, #0
 800459e:	e7ea      	b.n	8004576 <__fpclassifyd+0x16>
 80045a0:	7fdfffff 	.word	0x7fdfffff
 80045a4:	7ff00000 	.word	0x7ff00000

080045a8 <_init>:
 80045a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045aa:	bf00      	nop
 80045ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ae:	bc08      	pop	{r3}
 80045b0:	469e      	mov	lr, r3
 80045b2:	4770      	bx	lr

080045b4 <_fini>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	bf00      	nop
 80045b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ba:	bc08      	pop	{r3}
 80045bc:	469e      	mov	lr, r3
 80045be:	4770      	bx	lr
